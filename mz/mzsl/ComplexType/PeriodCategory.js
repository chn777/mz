var WIPMapping = require('ComplexType/WIPMapping')
var WIPMappingCollection = require('ComplexType/WIPMappingCollection')

var BoSubPeriodTypeEnum = require('EnumType/BoSubPeriodTypeEnum')

var ServiceLayerModule = require('Base/ServiceLayerModule.js');

//Workaround the possible intellisense bug of VS
if (typeof (SAPB1) === "undefined") {
    SAPB1 = {};
}

SAPB1.PeriodCategory = function () {
}
SAPB1.PeriodCategory.prototype = new SAPB1.ComplexType();
SAPB1.PeriodCategory.prototype.constructor = SAPB1.PeriodCategory;
SAPB1.PeriodCategory.AbsoluteEntry = { valueOf: function(){return 'AbsoluteEntry';}, Type: 'Edm.Int32', Index: 0, Nullable: false, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.BeginningofFinancialYear = { valueOf: function(){return 'BeginningofFinancialYear';}, Type: 'Edm.DateTime', Index: 1, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.PeriodCategory = { valueOf: function(){return 'PeriodCategory';}, Type: 'Edm.String', Index: 2, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.SubPeriodType = { valueOf: function(){return 'SubPeriodType';}, Type: 'BoSubPeriodTypeEnum', Index: 3, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.NumberOfPeriods = { valueOf: function(){return 'NumberOfPeriods';}, Type: 'Edm.Int32', Index: 4, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.PeriodName = { valueOf: function(){return 'PeriodName';}, Type: 'Edm.String', Index: 5, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.DebitorsFollowUpAccount = { valueOf: function(){return 'DebitorsFollowUpAccount';}, Type: 'Edm.String', Index: 6, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.AccountforOutgoingChecks = { valueOf: function(){return 'AccountforOutgoingChecks';}, Type: 'Edm.String', Index: 7, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.AccountforCashReceipt = { valueOf: function(){return 'AccountforCashReceipt';}, Type: 'Edm.String', Index: 8, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.CustomersDeductionatSource = { valueOf: function(){return 'CustomersDeductionatSource';}, Type: 'Edm.String', Index: 9, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.CommissionAccountDefault = { valueOf: function(){return 'CommissionAccountDefault';}, Type: 'Edm.String', Index: 10, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.PurchaseTax = { valueOf: function(){return 'PurchaseTax';}, Type: 'Edm.String', Index: 11, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ForeignAccountsReceivables = { valueOf: function(){return 'ForeignAccountsReceivables';}, Type: 'Edm.String', Index: 12, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.CreditorsFollowUpAccount = { valueOf: function(){return 'CreditorsFollowUpAccount';}, Type: 'Edm.String', Index: 13, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.OutgoingChecksAccount = { valueOf: function(){return 'OutgoingChecksAccount';}, Type: 'Edm.String', Index: 14, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.OutgoingCashAccount = { valueOf: function(){return 'OutgoingCashAccount';}, Type: 'Edm.String', Index: 15, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.AccountforCreditMemoPayme = { valueOf: function(){return 'AccountforCreditMemoPayme';}, Type: 'Edm.String', Index: 16, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.InputTaxAccount = { valueOf: function(){return 'InputTaxAccount';}, Type: 'Edm.String', Index: 17, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.TaxDefinition = { valueOf: function(){return 'TaxDefinition';}, Type: 'Edm.String', Index: 18, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.WithholodingTax = { valueOf: function(){return 'WithholodingTax';}, Type: 'Edm.String', Index: 19, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.OpeningBalancesAccount = { valueOf: function(){return 'OpeningBalancesAccount';}, Type: 'Edm.String', Index: 20, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.DefaultSaleAccount = { valueOf: function(){return 'DefaultSaleAccount';}, Type: 'Edm.String', Index: 21, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.TaxExemptRevenuesDefault = { valueOf: function(){return 'TaxExemptRevenuesDefault';}, Type: 'Edm.String', Index: 22, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ExpenseAccountDefault = { valueOf: function(){return 'ExpenseAccountDefault';}, Type: 'Edm.String', Index: 23, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.RevenuesAccountForeign = { valueOf: function(){return 'RevenuesAccountForeign';}, Type: 'Edm.String', Index: 24, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.SalesRevenueEU = { valueOf: function(){return 'SalesRevenueEU';}, Type: 'Edm.String', Index: 25, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ExpensesAccountForeign = { valueOf: function(){return 'ExpensesAccountForeign';}, Type: 'Edm.String', Index: 26, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.RateDifferencesDefaultAcc = { valueOf: function(){return 'RateDifferencesDefaultAcc';}, Type: 'Edm.String', Index: 27, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.DecreaseGLAcc = { valueOf: function(){return 'DecreaseGLAcc';}, Type: 'Edm.String', Index: 28, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ReconciliationDifference = { valueOf: function(){return 'ReconciliationDifference';}, Type: 'Edm.String', Index: 29, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.AcountforOpeningWHBalance = { valueOf: function(){return 'AcountforOpeningWHBalance';}, Type: 'Edm.String', Index: 30, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.APCashDiscountAccount = { valueOf: function(){return 'APCashDiscountAccount';}, Type: 'Edm.String', Index: 31, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.APLossCashDiscountAccount = { valueOf: function(){return 'APLossCashDiscountAccount';}, Type: 'Edm.String', Index: 32, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.APLossRealizedExchangeDif = { valueOf: function(){return 'APLossRealizedExchangeDif';}, Type: 'Edm.String', Index: 33, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ARCashDiscountAccount = { valueOf: function(){return 'ARCashDiscountAccount';}, Type: 'Edm.String', Index: 34, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ARLossRealizedExchangeDi = { valueOf: function(){return 'ARLossRealizedExchangeDi';}, Type: 'Edm.String', Index: 35, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.RoundingAccount = { valueOf: function(){return 'RoundingAccount';}, Type: 'Edm.String', Index: 36, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.APGainRealizedExchngeDif = { valueOf: function(){return 'APGainRealizedExchngeDif';}, Type: 'Edm.String', Index: 37, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ARGainRealizedExchngeDif = { valueOf: function(){return 'ARGainRealizedExchngeDif';}, Type: 'Edm.String', Index: 38, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.IncreaseGLAccount = { valueOf: function(){return 'IncreaseGLAccount';}, Type: 'Edm.String', Index: 39, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.SalesReturns = { valueOf: function(){return 'SalesReturns';}, Type: 'Edm.String', Index: 40, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.CostOfGoodsSold = { valueOf: function(){return 'CostOfGoodsSold';}, Type: 'Edm.String', Index: 41, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.AllocationAcc = { valueOf: function(){return 'AllocationAcc';}, Type: 'Edm.String', Index: 42, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.VarianceAcc = { valueOf: function(){return 'VarianceAcc';}, Type: 'Edm.String', Index: 43, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.PriceDifferenceAccount = { valueOf: function(){return 'PriceDifferenceAccount';}, Type: 'Edm.String', Index: 44, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.CustomerDownPaymentsAccount = { valueOf: function(){return 'CustomerDownPaymentsAccount';}, Type: 'Edm.String', Index: 45, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.VendorDownPaymentsAccount = { valueOf: function(){return 'VendorDownPaymentsAccount';}, Type: 'Edm.String', Index: 46, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.BillofExchangeAccountsRece = { valueOf: function(){return 'BillofExchangeAccountsRece';}, Type: 'Edm.String', Index: 47, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.CustBillofExchangeonC = { valueOf: function(){return 'CustBillofExchangeonC';}, Type: 'Edm.String', Index: 48, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.CustomerBillofExchangePres = { valueOf: function(){return 'CustomerBillofExchangePres';}, Type: 'Edm.String', Index: 49, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.CustomerBillofExchngeDisc = { valueOf: function(){return 'CustomerBillofExchngeDisc';}, Type: 'Edm.String', Index: 50, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.CustomerUnpaidBoE = { valueOf: function(){return 'CustomerUnpaidBoE';}, Type: 'Edm.String', Index: 51, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.BoEAccountsPayable = { valueOf: function(){return 'BoEAccountsPayable';}, Type: 'Edm.String', Index: 52, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.BoEAccountsPayable2 = { valueOf: function(){return 'BoEAccountsPayable2';}, Type: 'Edm.String', Index: 53, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.CustomerDoubtfulDebtsAcct = { valueOf: function(){return 'CustomerDoubtfulDebtsAcct';}, Type: 'Edm.String', Index: 54, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.VendorDoubtfulDebtsAcct = { valueOf: function(){return 'VendorDoubtfulDebtsAcct';}, Type: 'Edm.String', Index: 55, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.PurchaseAccount = { valueOf: function(){return 'PurchaseAccount';}, Type: 'Edm.String', Index: 56, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.PurchaseReturnAccount = { valueOf: function(){return 'PurchaseReturnAccount';}, Type: 'Edm.String', Index: 57, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.PurchaseOffsetAccount = { valueOf: function(){return 'PurchaseOffsetAccount';}, Type: 'Edm.String', Index: 58, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.EOYControlAccount = { valueOf: function(){return 'EOYControlAccount';}, Type: 'Edm.String', Index: 59, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ExchangeRateDifferencesAcct = { valueOf: function(){return 'ExchangeRateDifferencesAcct';}, Type: 'Edm.String', Index: 60, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.GoodsClearingAcc = { valueOf: function(){return 'GoodsClearingAcc';}, Type: 'Edm.String', Index: 61, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ExpenseClearingAccount = { valueOf: function(){return 'ExpenseClearingAccount';}, Type: 'Edm.String', Index: 62, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ExpenseOffsetAccount = { valueOf: function(){return 'ExpenseOffsetAccount';}, Type: 'Edm.String', Index: 63, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.CostofSaleRevaluationAcct = { valueOf: function(){return 'CostofSaleRevaluationAcct';}, Type: 'Edm.String', Index: 64, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.RepomoAccount = { valueOf: function(){return 'RepomoAccount';}, Type: 'Edm.String', Index: 65, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.WIPMaterialVarianceAccount = { valueOf: function(){return 'WIPMaterialVarianceAccount';}, Type: 'Edm.String', Index: 66, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.DownPaymentVATAcctSale = { valueOf: function(){return 'DownPaymentVATAcctSale';}, Type: 'Edm.String', Index: 67, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.DownPaymentVATAcctPurch = { valueOf: function(){return 'DownPaymentVATAcctPurch';}, Type: 'Edm.String', Index: 68, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.DownPaymentSClearingAcct = { valueOf: function(){return 'DownPaymentSClearingAcct';}, Type: 'Edm.String', Index: 69, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.DownPaymentPClearingAcct = { valueOf: function(){return 'DownPaymentPClearingAcct';}, Type: 'Edm.String', Index: 70, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ExpenseVarianceAccount = { valueOf: function(){return 'ExpenseVarianceAccount';}, Type: 'Edm.String', Index: 71, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.CostofSaleRevOffsetAcct = { valueOf: function(){return 'CostofSaleRevOffsetAcct';}, Type: 'Edm.String', Index: 72, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.EUExpenseAccount = { valueOf: function(){return 'EUExpenseAccount';}, Type: 'Edm.String', Index: 73, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.StockAccount = { valueOf: function(){return 'StockAccount';}, Type: 'Edm.String', Index: 74, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.InventoryOffsetIncrease = { valueOf: function(){return 'InventoryOffsetIncrease';}, Type: 'Edm.String', Index: 75, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.InventoryOffsetDecrease = { valueOf: function(){return 'InventoryOffsetDecrease';}, Type: 'Edm.String', Index: 76, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.VendorAssetsAccount = { valueOf: function(){return 'VendorAssetsAccount';}, Type: 'Edm.String', Index: 77, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.StockRevaluationAccount = { valueOf: function(){return 'StockRevaluationAccount';}, Type: 'Edm.String', Index: 78, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.StockRevaluationOffsetAcct = { valueOf: function(){return 'StockRevaluationOffsetAcct';}, Type: 'Edm.String', Index: 79, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.WIPMaterialAccount = { valueOf: function(){return 'WIPMaterialAccount';}, Type: 'Edm.String', Index: 80, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.InvoicePaymentBP = { valueOf: function(){return 'InvoicePaymentBP';}, Type: 'Edm.String', Index: 81, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.GLRevaluationOffsetAccount = { valueOf: function(){return 'GLRevaluationOffsetAccount';}, Type: 'Edm.String', Index: 82, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.OverpaymentsAPAccount = { valueOf: function(){return 'OverpaymentsAPAccount';}, Type: 'Edm.String', Index: 83, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.UnderpaymentsAPAccount = { valueOf: function(){return 'UnderpaymentsAPAccount';}, Type: 'Edm.String', Index: 84, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.OverpaymentsARAccount = { valueOf: function(){return 'OverpaymentsARAccount';}, Type: 'Edm.String', Index: 85, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.UnderpaymentsARAccount = { valueOf: function(){return 'UnderpaymentsARAccount';}, Type: 'Edm.String', Index: 86, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.PurchaseCreditAcc = { valueOf: function(){return 'PurchaseCreditAcc';}, Type: 'Edm.String', Index: 87, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.EUPurchaseCreditAcc = { valueOf: function(){return 'EUPurchaseCreditAcc';}, Type: 'Edm.String', Index: 88, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ForeignPurchaseCreditAcc = { valueOf: function(){return 'ForeignPurchaseCreditAcc';}, Type: 'Edm.String', Index: 89, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.SalesCreditAcc = { valueOf: function(){return 'SalesCreditAcc';}, Type: 'Edm.String', Index: 90, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.SalesCreditEUAcc = { valueOf: function(){return 'SalesCreditEUAcc';}, Type: 'Edm.String', Index: 91, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ExemptedCredits = { valueOf: function(){return 'ExemptedCredits';}, Type: 'Edm.String', Index: 92, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.SalesCreditForeignAcc = { valueOf: function(){return 'SalesCreditForeignAcc';}, Type: 'Edm.String', Index: 93, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.FromPostingDate = { valueOf: function(){return 'FromPostingDate';}, Type: 'Edm.DateTime', Index: 94, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ToPostingDate = { valueOf: function(){return 'ToPostingDate';}, Type: 'Edm.DateTime', Index: 95, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.FromDueDate = { valueOf: function(){return 'FromDueDate';}, Type: 'Edm.DateTime', Index: 96, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ToDueDate = { valueOf: function(){return 'ToDueDate';}, Type: 'Edm.DateTime', Index: 97, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.FromDocumentDate = { valueOf: function(){return 'FromDocumentDate';}, Type: 'Edm.DateTime', Index: 98, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ToDocumentDate = { valueOf: function(){return 'ToDocumentDate';}, Type: 'Edm.DateTime', Index: 99, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.OutgoingTaxAccount = { valueOf: function(){return 'OutgoingTaxAccount';}, Type: 'Edm.String', Index: 100, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.NegativeInventoryAdjustmentAccount = { valueOf: function(){return 'NegativeInventoryAdjustmentAccount';}, Type: 'Edm.String', Index: 101, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.FinancialYear = { valueOf: function(){return 'FinancialYear';}, Type: 'Edm.Int32', Index: 102, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.SelfInvoiceRevenueAccount = { valueOf: function(){return 'SelfInvoiceRevenueAccount';}, Type: 'Edm.String', Index: 103, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.SelfInvoiceExpenseAccount = { valueOf: function(){return 'SelfInvoiceExpenseAccount';}, Type: 'Edm.String', Index: 104, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.StockInTransitAccount = { valueOf: function(){return 'StockInTransitAccount';}, Type: 'Edm.String', Index: 105, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.SalesDownPaymentInterimAccount = { valueOf: function(){return 'SalesDownPaymentInterimAccount';}, Type: 'Edm.String', Index: 106, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.PurchaseDownPaymentInterimAccount = { valueOf: function(){return 'PurchaseDownPaymentInterimAccount';}, Type: 'Edm.String', Index: 107, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.EUAccountsReceivable = { valueOf: function(){return 'EUAccountsReceivable';}, Type: 'Edm.String', Index: 108, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.EUAccountsPayable = { valueOf: function(){return 'EUAccountsPayable';}, Type: 'Edm.String', Index: 109, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.WipOffsetProfitAndLossAccount = { valueOf: function(){return 'WipOffsetProfitAndLossAccount';}, Type: 'Edm.String', Index: 110, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.InventoryOffsetProfitAndLossAccount = { valueOf: function(){return 'InventoryOffsetProfitAndLossAccount';}, Type: 'Edm.String', Index: 111, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.DunningInterestAccount = { valueOf: function(){return 'DunningInterestAccount';}, Type: 'Edm.String', Index: 112, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.DunningFeeAccount = { valueOf: function(){return 'DunningFeeAccount';}, Type: 'Edm.String', Index: 113, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ARGainRealizedConversionDiff = { valueOf: function(){return 'ARGainRealizedConversionDiff';}, Type: 'Edm.String', Index: 114, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ARLossRealizedConversionDiff = { valueOf: function(){return 'ARLossRealizedConversionDiff';}, Type: 'Edm.String', Index: 115, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.APGainRealizedConversionDiff = { valueOf: function(){return 'APGainRealizedConversionDiff';}, Type: 'Edm.String', Index: 116, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.APLossRealizedConversionDiff = { valueOf: function(){return 'APLossRealizedConversionDiff';}, Type: 'Edm.String', Index: 117, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.GLGainRealizedConversionDiff = { valueOf: function(){return 'GLGainRealizedConversionDiff';}, Type: 'Edm.String', Index: 118, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.GLLossRealizedConversionDiff = { valueOf: function(){return 'GLLossRealizedConversionDiff';}, Type: 'Edm.String', Index: 119, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ARExRateInterim = { valueOf: function(){return 'ARExRateInterim';}, Type: 'Edm.String', Index: 120, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.APExRateInterim = { valueOf: function(){return 'APExRateInterim';}, Type: 'Edm.String', Index: 121, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.ARCashDiscountInterim = { valueOf: function(){return 'ARCashDiscountInterim';}, Type: 'Edm.String', Index: 122, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.APCashDiscountInterim = { valueOf: function(){return 'APCashDiscountInterim';}, Type: 'Edm.String', Index: 123, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.PeriodCategory.WIPMappingCollection = { valueOf: function(){return 'WIPMappingCollection';}, Type: 'WIPMapping', Index: 124, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.PeriodCategory.prototype.AbsoluteEntry = new Number();
SAPB1.PeriodCategory.prototype.BeginningofFinancialYear = new String();
SAPB1.PeriodCategory.prototype.PeriodCategory = new String();
SAPB1.PeriodCategory.prototype.SubPeriodType = new String();
SAPB1.PeriodCategory.prototype.NumberOfPeriods = new Number();
SAPB1.PeriodCategory.prototype.PeriodName = new String();
SAPB1.PeriodCategory.prototype.DebitorsFollowUpAccount = new String();
SAPB1.PeriodCategory.prototype.AccountforOutgoingChecks = new String();
SAPB1.PeriodCategory.prototype.AccountforCashReceipt = new String();
SAPB1.PeriodCategory.prototype.CustomersDeductionatSource = new String();
SAPB1.PeriodCategory.prototype.CommissionAccountDefault = new String();
SAPB1.PeriodCategory.prototype.PurchaseTax = new String();
SAPB1.PeriodCategory.prototype.ForeignAccountsReceivables = new String();
SAPB1.PeriodCategory.prototype.CreditorsFollowUpAccount = new String();
SAPB1.PeriodCategory.prototype.OutgoingChecksAccount = new String();
SAPB1.PeriodCategory.prototype.OutgoingCashAccount = new String();
SAPB1.PeriodCategory.prototype.AccountforCreditMemoPayme = new String();
SAPB1.PeriodCategory.prototype.InputTaxAccount = new String();
SAPB1.PeriodCategory.prototype.TaxDefinition = new String();
SAPB1.PeriodCategory.prototype.WithholodingTax = new String();
SAPB1.PeriodCategory.prototype.OpeningBalancesAccount = new String();
SAPB1.PeriodCategory.prototype.DefaultSaleAccount = new String();
SAPB1.PeriodCategory.prototype.TaxExemptRevenuesDefault = new String();
SAPB1.PeriodCategory.prototype.ExpenseAccountDefault = new String();
SAPB1.PeriodCategory.prototype.RevenuesAccountForeign = new String();
SAPB1.PeriodCategory.prototype.SalesRevenueEU = new String();
SAPB1.PeriodCategory.prototype.ExpensesAccountForeign = new String();
SAPB1.PeriodCategory.prototype.RateDifferencesDefaultAcc = new String();
SAPB1.PeriodCategory.prototype.DecreaseGLAcc = new String();
SAPB1.PeriodCategory.prototype.ReconciliationDifference = new String();
SAPB1.PeriodCategory.prototype.AcountforOpeningWHBalance = new String();
SAPB1.PeriodCategory.prototype.APCashDiscountAccount = new String();
SAPB1.PeriodCategory.prototype.APLossCashDiscountAccount = new String();
SAPB1.PeriodCategory.prototype.APLossRealizedExchangeDif = new String();
SAPB1.PeriodCategory.prototype.ARCashDiscountAccount = new String();
SAPB1.PeriodCategory.prototype.ARLossRealizedExchangeDi = new String();
SAPB1.PeriodCategory.prototype.RoundingAccount = new String();
SAPB1.PeriodCategory.prototype.APGainRealizedExchngeDif = new String();
SAPB1.PeriodCategory.prototype.ARGainRealizedExchngeDif = new String();
SAPB1.PeriodCategory.prototype.IncreaseGLAccount = new String();
SAPB1.PeriodCategory.prototype.SalesReturns = new String();
SAPB1.PeriodCategory.prototype.CostOfGoodsSold = new String();
SAPB1.PeriodCategory.prototype.AllocationAcc = new String();
SAPB1.PeriodCategory.prototype.VarianceAcc = new String();
SAPB1.PeriodCategory.prototype.PriceDifferenceAccount = new String();
SAPB1.PeriodCategory.prototype.CustomerDownPaymentsAccount = new String();
SAPB1.PeriodCategory.prototype.VendorDownPaymentsAccount = new String();
SAPB1.PeriodCategory.prototype.BillofExchangeAccountsRece = new String();
SAPB1.PeriodCategory.prototype.CustBillofExchangeonC = new String();
SAPB1.PeriodCategory.prototype.CustomerBillofExchangePres = new String();
SAPB1.PeriodCategory.prototype.CustomerBillofExchngeDisc = new String();
SAPB1.PeriodCategory.prototype.CustomerUnpaidBoE = new String();
SAPB1.PeriodCategory.prototype.BoEAccountsPayable = new String();
SAPB1.PeriodCategory.prototype.BoEAccountsPayable2 = new String();
SAPB1.PeriodCategory.prototype.CustomerDoubtfulDebtsAcct = new String();
SAPB1.PeriodCategory.prototype.VendorDoubtfulDebtsAcct = new String();
SAPB1.PeriodCategory.prototype.PurchaseAccount = new String();
SAPB1.PeriodCategory.prototype.PurchaseReturnAccount = new String();
SAPB1.PeriodCategory.prototype.PurchaseOffsetAccount = new String();
SAPB1.PeriodCategory.prototype.EOYControlAccount = new String();
SAPB1.PeriodCategory.prototype.ExchangeRateDifferencesAcct = new String();
SAPB1.PeriodCategory.prototype.GoodsClearingAcc = new String();
SAPB1.PeriodCategory.prototype.ExpenseClearingAccount = new String();
SAPB1.PeriodCategory.prototype.ExpenseOffsetAccount = new String();
SAPB1.PeriodCategory.prototype.CostofSaleRevaluationAcct = new String();
SAPB1.PeriodCategory.prototype.RepomoAccount = new String();
SAPB1.PeriodCategory.prototype.WIPMaterialVarianceAccount = new String();
SAPB1.PeriodCategory.prototype.DownPaymentVATAcctSale = new String();
SAPB1.PeriodCategory.prototype.DownPaymentVATAcctPurch = new String();
SAPB1.PeriodCategory.prototype.DownPaymentSClearingAcct = new String();
SAPB1.PeriodCategory.prototype.DownPaymentPClearingAcct = new String();
SAPB1.PeriodCategory.prototype.ExpenseVarianceAccount = new String();
SAPB1.PeriodCategory.prototype.CostofSaleRevOffsetAcct = new String();
SAPB1.PeriodCategory.prototype.EUExpenseAccount = new String();
SAPB1.PeriodCategory.prototype.StockAccount = new String();
SAPB1.PeriodCategory.prototype.InventoryOffsetIncrease = new String();
SAPB1.PeriodCategory.prototype.InventoryOffsetDecrease = new String();
SAPB1.PeriodCategory.prototype.VendorAssetsAccount = new String();
SAPB1.PeriodCategory.prototype.StockRevaluationAccount = new String();
SAPB1.PeriodCategory.prototype.StockRevaluationOffsetAcct = new String();
SAPB1.PeriodCategory.prototype.WIPMaterialAccount = new String();
SAPB1.PeriodCategory.prototype.InvoicePaymentBP = new String();
SAPB1.PeriodCategory.prototype.GLRevaluationOffsetAccount = new String();
SAPB1.PeriodCategory.prototype.OverpaymentsAPAccount = new String();
SAPB1.PeriodCategory.prototype.UnderpaymentsAPAccount = new String();
SAPB1.PeriodCategory.prototype.OverpaymentsARAccount = new String();
SAPB1.PeriodCategory.prototype.UnderpaymentsARAccount = new String();
SAPB1.PeriodCategory.prototype.PurchaseCreditAcc = new String();
SAPB1.PeriodCategory.prototype.EUPurchaseCreditAcc = new String();
SAPB1.PeriodCategory.prototype.ForeignPurchaseCreditAcc = new String();
SAPB1.PeriodCategory.prototype.SalesCreditAcc = new String();
SAPB1.PeriodCategory.prototype.SalesCreditEUAcc = new String();
SAPB1.PeriodCategory.prototype.ExemptedCredits = new String();
SAPB1.PeriodCategory.prototype.SalesCreditForeignAcc = new String();
SAPB1.PeriodCategory.prototype.FromPostingDate = new String();
SAPB1.PeriodCategory.prototype.ToPostingDate = new String();
SAPB1.PeriodCategory.prototype.FromDueDate = new String();
SAPB1.PeriodCategory.prototype.ToDueDate = new String();
SAPB1.PeriodCategory.prototype.FromDocumentDate = new String();
SAPB1.PeriodCategory.prototype.ToDocumentDate = new String();
SAPB1.PeriodCategory.prototype.OutgoingTaxAccount = new String();
SAPB1.PeriodCategory.prototype.NegativeInventoryAdjustmentAccount = new String();
SAPB1.PeriodCategory.prototype.FinancialYear = new Number();
SAPB1.PeriodCategory.prototype.SelfInvoiceRevenueAccount = new String();
SAPB1.PeriodCategory.prototype.SelfInvoiceExpenseAccount = new String();
SAPB1.PeriodCategory.prototype.StockInTransitAccount = new String();
SAPB1.PeriodCategory.prototype.SalesDownPaymentInterimAccount = new String();
SAPB1.PeriodCategory.prototype.PurchaseDownPaymentInterimAccount = new String();
SAPB1.PeriodCategory.prototype.EUAccountsReceivable = new String();
SAPB1.PeriodCategory.prototype.EUAccountsPayable = new String();
SAPB1.PeriodCategory.prototype.WipOffsetProfitAndLossAccount = new String();
SAPB1.PeriodCategory.prototype.InventoryOffsetProfitAndLossAccount = new String();
SAPB1.PeriodCategory.prototype.DunningInterestAccount = new String();
SAPB1.PeriodCategory.prototype.DunningFeeAccount = new String();
SAPB1.PeriodCategory.prototype.ARGainRealizedConversionDiff = new String();
SAPB1.PeriodCategory.prototype.ARLossRealizedConversionDiff = new String();
SAPB1.PeriodCategory.prototype.APGainRealizedConversionDiff = new String();
SAPB1.PeriodCategory.prototype.APLossRealizedConversionDiff = new String();
SAPB1.PeriodCategory.prototype.GLGainRealizedConversionDiff = new String();
SAPB1.PeriodCategory.prototype.GLLossRealizedConversionDiff = new String();
SAPB1.PeriodCategory.prototype.ARExRateInterim = new String();
SAPB1.PeriodCategory.prototype.APExRateInterim = new String();
SAPB1.PeriodCategory.prototype.ARCashDiscountInterim = new String();
SAPB1.PeriodCategory.prototype.APCashDiscountInterim = new String();
SAPB1.PeriodCategory.prototype.WIPMappingCollection = new WIPMappingCollection();

SAPB1.PeriodCategory.WIPMapping = WIPMapping
SAPB1.PeriodCategory.WIPMappingCollection = WIPMappingCollection

SAPB1.PeriodCategory.BoSubPeriodTypeEnum = BoSubPeriodTypeEnum

SAPB1.PeriodCategory.create = function (rawObject) {
    var instance = new SAPB1.PeriodCategory();
    for (var prop in rawObject) {
        if (rawObject.hasOwnProperty(prop)) {
            if (SAPB1.PeriodCategory.prototype.hasOwnProperty(prop)) {
                if (instance[prop] instanceof SAPB1.Collection) {
                    var collectionInstance = instance[prop].constructor.create(rawObject[prop]);
                    instance[prop] = collectionInstance;
                } else if (instance[prop] instanceof SAPB1.ComplexType) {
                    var complexInstance = instance[prop].constructor.create(rawObject[prop]);
                    instance[prop] = complexInstance;
                }
                else {
                    instance[prop] = rawObject[prop];
                }
            }
        }
    }
    return instance;
}


module.exports = SAPB1.PeriodCategory;
