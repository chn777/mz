var Document_ApprovalRequest = require('ComplexType/Document_ApprovalRequest')
var Document_ApprovalRequestCollection = require('ComplexType/Document_ApprovalRequestCollection')
var DocumentLine = require('ComplexType/DocumentLine')
var DocumentLineCollection = require('ComplexType/DocumentLineCollection')
var EWayBillDetails = require('ComplexType/EWayBillDetails')
var ElectronicProtocol = require('ComplexType/ElectronicProtocol')
var ElectronicProtocolCollection = require('ComplexType/ElectronicProtocolCollection')
var DocumentAdditionalExpense = require('ComplexType/DocumentAdditionalExpense')
var DocumentAdditionalExpenseCollection = require('ComplexType/DocumentAdditionalExpenseCollection')
var WithholdingTaxDataWTX = require('ComplexType/WithholdingTaxDataWTX')
var WithholdingTaxDataWTXCollection = require('ComplexType/WithholdingTaxDataWTXCollection')
var WithholdingTaxData = require('ComplexType/WithholdingTaxData')
var WithholdingTaxDataCollection = require('ComplexType/WithholdingTaxDataCollection')
var DocumentPackage = require('ComplexType/DocumentPackage')
var DocumentPackageCollection = require('ComplexType/DocumentPackageCollection')
var DocumentSpecialLine = require('ComplexType/DocumentSpecialLine')
var DocumentSpecialLineCollection = require('ComplexType/DocumentSpecialLineCollection')
var DocumentInstallment = require('ComplexType/DocumentInstallment')
var DocumentInstallmentCollection = require('ComplexType/DocumentInstallmentCollection')
var DownPaymentToDraw = require('ComplexType/DownPaymentToDraw')
var DownPaymentToDrawCollection = require('ComplexType/DownPaymentToDrawCollection')
var TaxExtension = require('ComplexType/TaxExtension')
var AddressExtension = require('ComplexType/AddressExtension')

var BoDocumentTypes = require('EnumType/BoDocumentTypes')
var BoYesNoEnum = require('EnumType/BoYesNoEnum')
var PrintStatusEnum = require('EnumType/PrintStatusEnum')
var BoDocSummaryTypes = require('EnumType/BoDocSummaryTypes')
var BoObjectTypes = require('EnumType/BoObjectTypes')
var BoDocWhsUpdateTypes = require('EnumType/BoDocWhsUpdateTypes')
var BoDocumentSubType = require('EnumType/BoDocumentSubType')
var BoStatus = require('EnumType/BoStatus')
var DownPaymentTypeEnum = require('EnumType/DownPaymentTypeEnum')
var BoPayTermDueTypes = require('EnumType/BoPayTermDueTypes')
var EDocGenerationTypeEnum = require('EnumType/EDocGenerationTypeEnum')
var EDocStatusEnum = require('EnumType/EDocStatusEnum')
var BoSoStatus = require('EnumType/BoSoStatus')
var ClosingOptionEnum = require('EnumType/ClosingOptionEnum')
var DocumentAuthorizationStatusEnum = require('EnumType/DocumentAuthorizationStatusEnum')
var CancelStatusEnum = require('EnumType/CancelStatusEnum')
var DocumentDeliveryTypeEnum = require('EnumType/DocumentDeliveryTypeEnum')
var ElecCommStatusEnum = require('EnumType/ElecCommStatusEnum')
var FolioLetterEnum = require('EnumType/FolioLetterEnum')
var BoInterimDocTypes = require('EnumType/BoInterimDocTypes')
var PriceModeDocumentEnum = require('EnumType/PriceModeDocumentEnum')
var GSTTransactionTypeEnum = require('EnumType/GSTTransactionTypeEnum')
var CommissionTradeTypeEnum = require('EnumType/CommissionTradeTypeEnum')

var ServiceLayerModule = require('Base/ServiceLayerModule.js');

//workaround the possible intellisense bug of VS
if (typeof (SAPB1) === "undefined") {
    SAPB1 = {};
}

SAPB1.Document = function () {
}
SAPB1.Document.prototype = new SAPB1.EntityType();
SAPB1.Document.prototype.constructor = SAPB1.Document;
SAPB1.Document.prototype.keys.push('DocEntry');
SAPB1.Document.DocEntry = { valueOf: function(){return 'DocEntry';}, Type: 'Edm.Int32', Index: 0, Nullable: false, IsArray: false, IsComplex: false };
SAPB1.Document.DocNum = { valueOf: function(){return 'DocNum';}, Type: 'Edm.Int32', Index: 1, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DocType = { valueOf: function(){return 'DocType';}, Type: 'BoDocumentTypes', Index: 2, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.HandWritten = { valueOf: function(){return 'HandWritten';}, Type: 'BoYesNoEnum', Index: 3, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Printed = { valueOf: function(){return 'Printed';}, Type: 'PrintStatusEnum', Index: 4, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DocDate = { valueOf: function(){return 'DocDate';}, Type: 'Edm.DateTime', Index: 5, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DocDueDate = { valueOf: function(){return 'DocDueDate';}, Type: 'Edm.DateTime', Index: 6, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.CardCode = { valueOf: function(){return 'CardCode';}, Type: 'Edm.String', Index: 7, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.CardName = { valueOf: function(){return 'CardName';}, Type: 'Edm.String', Index: 8, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Address = { valueOf: function(){return 'Address';}, Type: 'Edm.String', Index: 9, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.NumAtCard = { valueOf: function(){return 'NumAtCard';}, Type: 'Edm.String', Index: 10, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DocTotal = { valueOf: function(){return 'DocTotal';}, Type: 'Edm.Double', Index: 11, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.AttachmentEntry = { valueOf: function(){return 'AttachmentEntry';}, Type: 'Edm.Int32', Index: 12, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DocCurrency = { valueOf: function(){return 'DocCurrency';}, Type: 'Edm.String', Index: 13, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DocRate = { valueOf: function(){return 'DocRate';}, Type: 'Edm.Double', Index: 14, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Reference1 = { valueOf: function(){return 'Reference1';}, Type: 'Edm.String', Index: 15, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Reference2 = { valueOf: function(){return 'Reference2';}, Type: 'Edm.String', Index: 16, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Comments = { valueOf: function(){return 'Comments';}, Type: 'Edm.String', Index: 17, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.JournalMemo = { valueOf: function(){return 'JournalMemo';}, Type: 'Edm.String', Index: 18, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PaymentGroupCode = { valueOf: function(){return 'PaymentGroupCode';}, Type: 'Edm.Int32', Index: 19, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DocTime = { valueOf: function(){return 'DocTime';}, Type: 'Edm.Time', Index: 20, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.SalesPersonCode = { valueOf: function(){return 'SalesPersonCode';}, Type: 'Edm.Int32', Index: 21, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.TransportationCode = { valueOf: function(){return 'TransportationCode';}, Type: 'Edm.Int32', Index: 22, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Confirmed = { valueOf: function(){return 'Confirmed';}, Type: 'BoYesNoEnum', Index: 23, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ImportFileNum = { valueOf: function(){return 'ImportFileNum';}, Type: 'Edm.Int32', Index: 24, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.SummeryType = { valueOf: function(){return 'SummeryType';}, Type: 'BoDocSummaryTypes', Index: 25, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ContactPersonCode = { valueOf: function(){return 'ContactPersonCode';}, Type: 'Edm.Int32', Index: 26, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ShowSCN = { valueOf: function(){return 'ShowSCN';}, Type: 'BoYesNoEnum', Index: 27, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Series = { valueOf: function(){return 'Series';}, Type: 'Edm.Int32', Index: 28, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.TaxDate = { valueOf: function(){return 'TaxDate';}, Type: 'Edm.DateTime', Index: 29, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PartialSupply = { valueOf: function(){return 'PartialSupply';}, Type: 'BoYesNoEnum', Index: 30, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DocObjectCode = { valueOf: function(){return 'DocObjectCode';}, Type: 'BoObjectTypes', Index: 31, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ShipToCode = { valueOf: function(){return 'ShipToCode';}, Type: 'Edm.String', Index: 32, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Indicator = { valueOf: function(){return 'Indicator';}, Type: 'Edm.String', Index: 33, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.FederalTaxID = { valueOf: function(){return 'FederalTaxID';}, Type: 'Edm.String', Index: 34, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DiscountPercent = { valueOf: function(){return 'DiscountPercent';}, Type: 'Edm.Double', Index: 35, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PaymentReference = { valueOf: function(){return 'PaymentReference';}, Type: 'Edm.String', Index: 36, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.CreationDate = { valueOf: function(){return 'CreationDate';}, Type: 'Edm.DateTime', Index: 37, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.UpdateDate = { valueOf: function(){return 'UpdateDate';}, Type: 'Edm.DateTime', Index: 38, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.FinancialPeriod = { valueOf: function(){return 'FinancialPeriod';}, Type: 'Edm.Int32', Index: 39, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.TransNum = { valueOf: function(){return 'TransNum';}, Type: 'Edm.Int32', Index: 40, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.VatSum = { valueOf: function(){return 'VatSum';}, Type: 'Edm.Double', Index: 41, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.VatSumSys = { valueOf: function(){return 'VatSumSys';}, Type: 'Edm.Double', Index: 42, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.VatSumFc = { valueOf: function(){return 'VatSumFc';}, Type: 'Edm.Double', Index: 43, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.NetProcedure = { valueOf: function(){return 'NetProcedure';}, Type: 'BoYesNoEnum', Index: 44, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DocTotalFc = { valueOf: function(){return 'DocTotalFc';}, Type: 'Edm.Double', Index: 45, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DocTotalSys = { valueOf: function(){return 'DocTotalSys';}, Type: 'Edm.Double', Index: 46, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Form1099 = { valueOf: function(){return 'Form1099';}, Type: 'Edm.Int32', Index: 47, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Box1099 = { valueOf: function(){return 'Box1099';}, Type: 'Edm.String', Index: 48, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.RevisionPo = { valueOf: function(){return 'RevisionPo';}, Type: 'BoYesNoEnum', Index: 49, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.RequriedDate = { valueOf: function(){return 'RequriedDate';}, Type: 'Edm.DateTime', Index: 50, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.CancelDate = { valueOf: function(){return 'CancelDate';}, Type: 'Edm.DateTime', Index: 51, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.BlockDunning = { valueOf: function(){return 'BlockDunning';}, Type: 'BoYesNoEnum', Index: 52, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Submitted = { valueOf: function(){return 'Submitted';}, Type: 'BoYesNoEnum', Index: 53, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Segment = { valueOf: function(){return 'Segment';}, Type: 'Edm.Int32', Index: 54, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PickStatus = { valueOf: function(){return 'PickStatus';}, Type: 'BoYesNoEnum', Index: 55, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Pick = { valueOf: function(){return 'Pick';}, Type: 'BoYesNoEnum', Index: 56, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PaymentMethod = { valueOf: function(){return 'PaymentMethod';}, Type: 'Edm.String', Index: 57, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PaymentBlock = { valueOf: function(){return 'PaymentBlock';}, Type: 'BoYesNoEnum', Index: 58, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PaymentBlockEntry = { valueOf: function(){return 'PaymentBlockEntry';}, Type: 'Edm.Int32', Index: 59, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.CentralBankIndicator = { valueOf: function(){return 'CentralBankIndicator';}, Type: 'Edm.String', Index: 60, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.MaximumCashDiscount = { valueOf: function(){return 'MaximumCashDiscount';}, Type: 'BoYesNoEnum', Index: 61, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Reserve = { valueOf: function(){return 'Reserve';}, Type: 'BoYesNoEnum', Index: 62, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Project = { valueOf: function(){return 'Project';}, Type: 'Edm.String', Index: 63, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ExemptionValidityDateFrom = { valueOf: function(){return 'ExemptionValidityDateFrom';}, Type: 'Edm.DateTime', Index: 64, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ExemptionValidityDateTo = { valueOf: function(){return 'ExemptionValidityDateTo';}, Type: 'Edm.DateTime', Index: 65, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.WareHouseUpdateType = { valueOf: function(){return 'WareHouseUpdateType';}, Type: 'BoDocWhsUpdateTypes', Index: 66, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Rounding = { valueOf: function(){return 'Rounding';}, Type: 'BoYesNoEnum', Index: 67, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ExternalCorrectedDocNum = { valueOf: function(){return 'ExternalCorrectedDocNum';}, Type: 'Edm.String', Index: 68, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.InternalCorrectedDocNum = { valueOf: function(){return 'InternalCorrectedDocNum';}, Type: 'Edm.Int32', Index: 69, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.NextCorrectingDocument = { valueOf: function(){return 'NextCorrectingDocument';}, Type: 'Edm.Int32', Index: 70, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DeferredTax = { valueOf: function(){return 'DeferredTax';}, Type: 'BoYesNoEnum', Index: 71, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.TaxExemptionLetterNum = { valueOf: function(){return 'TaxExemptionLetterNum';}, Type: 'Edm.String', Index: 72, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.WTApplied = { valueOf: function(){return 'WTApplied';}, Type: 'Edm.Double', Index: 73, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.WTAppliedFC = { valueOf: function(){return 'WTAppliedFC';}, Type: 'Edm.Double', Index: 74, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.BillOfExchangeReserved = { valueOf: function(){return 'BillOfExchangeReserved';}, Type: 'BoYesNoEnum', Index: 75, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.AgentCode = { valueOf: function(){return 'AgentCode';}, Type: 'Edm.String', Index: 76, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.WTAppliedSC = { valueOf: function(){return 'WTAppliedSC';}, Type: 'Edm.Double', Index: 77, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.TotalEqualizationTax = { valueOf: function(){return 'TotalEqualizationTax';}, Type: 'Edm.Double', Index: 78, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.TotalEqualizationTaxFC = { valueOf: function(){return 'TotalEqualizationTaxFC';}, Type: 'Edm.Double', Index: 79, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.TotalEqualizationTaxSC = { valueOf: function(){return 'TotalEqualizationTaxSC';}, Type: 'Edm.Double', Index: 80, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.NumberOfInstallments = { valueOf: function(){return 'NumberOfInstallments';}, Type: 'Edm.Int32', Index: 81, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ApplyTaxOnFirstInstallment = { valueOf: function(){return 'ApplyTaxOnFirstInstallment';}, Type: 'BoYesNoEnum', Index: 82, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.WTNonSubjectAmount = { valueOf: function(){return 'WTNonSubjectAmount';}, Type: 'Edm.Double', Index: 83, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.WTNonSubjectAmountSC = { valueOf: function(){return 'WTNonSubjectAmountSC';}, Type: 'Edm.Double', Index: 84, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.WTNonSubjectAmountFC = { valueOf: function(){return 'WTNonSubjectAmountFC';}, Type: 'Edm.Double', Index: 85, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.WTExemptedAmount = { valueOf: function(){return 'WTExemptedAmount';}, Type: 'Edm.Double', Index: 86, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.WTExemptedAmountSC = { valueOf: function(){return 'WTExemptedAmountSC';}, Type: 'Edm.Double', Index: 87, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.WTExemptedAmountFC = { valueOf: function(){return 'WTExemptedAmountFC';}, Type: 'Edm.Double', Index: 88, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.BaseAmount = { valueOf: function(){return 'BaseAmount';}, Type: 'Edm.Double', Index: 89, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.BaseAmountSC = { valueOf: function(){return 'BaseAmountSC';}, Type: 'Edm.Double', Index: 90, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.BaseAmountFC = { valueOf: function(){return 'BaseAmountFC';}, Type: 'Edm.Double', Index: 91, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.WTAmount = { valueOf: function(){return 'WTAmount';}, Type: 'Edm.Double', Index: 92, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.WTAmountSC = { valueOf: function(){return 'WTAmountSC';}, Type: 'Edm.Double', Index: 93, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.WTAmountFC = { valueOf: function(){return 'WTAmountFC';}, Type: 'Edm.Double', Index: 94, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.VatDate = { valueOf: function(){return 'VatDate';}, Type: 'Edm.DateTime', Index: 95, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DocumentsOwner = { valueOf: function(){return 'DocumentsOwner';}, Type: 'Edm.Int32', Index: 96, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.FolioPrefixString = { valueOf: function(){return 'FolioPrefixString';}, Type: 'Edm.String', Index: 97, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.FolioNumber = { valueOf: function(){return 'FolioNumber';}, Type: 'Edm.Int32', Index: 98, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DocumentSubType = { valueOf: function(){return 'DocumentSubType';}, Type: 'BoDocumentSubType', Index: 99, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.BPChannelCode = { valueOf: function(){return 'BPChannelCode';}, Type: 'Edm.String', Index: 100, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.BPChannelContact = { valueOf: function(){return 'BPChannelContact';}, Type: 'Edm.Int32', Index: 101, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Address2 = { valueOf: function(){return 'Address2';}, Type: 'Edm.String', Index: 102, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DocumentStatus = { valueOf: function(){return 'DocumentStatus';}, Type: 'BoStatus', Index: 103, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PeriodIndicator = { valueOf: function(){return 'PeriodIndicator';}, Type: 'Edm.String', Index: 104, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PayToCode = { valueOf: function(){return 'PayToCode';}, Type: 'Edm.String', Index: 105, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ManualNumber = { valueOf: function(){return 'ManualNumber';}, Type: 'Edm.String', Index: 106, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.UseShpdGoodsAct = { valueOf: function(){return 'UseShpdGoodsAct';}, Type: 'BoYesNoEnum', Index: 107, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.IsPayToBank = { valueOf: function(){return 'IsPayToBank';}, Type: 'BoYesNoEnum', Index: 108, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PayToBankCountry = { valueOf: function(){return 'PayToBankCountry';}, Type: 'Edm.String', Index: 109, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PayToBankCode = { valueOf: function(){return 'PayToBankCode';}, Type: 'Edm.String', Index: 110, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PayToBankAccountNo = { valueOf: function(){return 'PayToBankAccountNo';}, Type: 'Edm.String', Index: 111, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PayToBankBranch = { valueOf: function(){return 'PayToBankBranch';}, Type: 'Edm.String', Index: 112, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.BPL_IDAssignedToInvoice = { valueOf: function(){return 'BPL_IDAssignedToInvoice';}, Type: 'Edm.Int32', Index: 113, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DownPayment = { valueOf: function(){return 'DownPayment';}, Type: 'Edm.Double', Index: 114, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ReserveInvoice = { valueOf: function(){return 'ReserveInvoice';}, Type: 'BoYesNoEnum', Index: 115, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.LanguageCode = { valueOf: function(){return 'LanguageCode';}, Type: 'Edm.Int32', Index: 116, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.TrackingNumber = { valueOf: function(){return 'TrackingNumber';}, Type: 'Edm.String', Index: 117, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PickRemark = { valueOf: function(){return 'PickRemark';}, Type: 'Edm.String', Index: 118, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ClosingDate = { valueOf: function(){return 'ClosingDate';}, Type: 'Edm.DateTime', Index: 119, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.SequenceCode = { valueOf: function(){return 'SequenceCode';}, Type: 'Edm.Int32', Index: 120, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.SequenceSerial = { valueOf: function(){return 'SequenceSerial';}, Type: 'Edm.Int32', Index: 121, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.SeriesString = { valueOf: function(){return 'SeriesString';}, Type: 'Edm.String', Index: 122, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.SubSeriesString = { valueOf: function(){return 'SubSeriesString';}, Type: 'Edm.String', Index: 123, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.SequenceModel = { valueOf: function(){return 'SequenceModel';}, Type: 'Edm.String', Index: 124, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.UseCorrectionVATGroup = { valueOf: function(){return 'UseCorrectionVATGroup';}, Type: 'BoYesNoEnum', Index: 125, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.TotalDiscount = { valueOf: function(){return 'TotalDiscount';}, Type: 'Edm.Double', Index: 126, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DownPaymentAmount = { valueOf: function(){return 'DownPaymentAmount';}, Type: 'Edm.Double', Index: 127, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DownPaymentPercentage = { valueOf: function(){return 'DownPaymentPercentage';}, Type: 'Edm.Double', Index: 128, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DownPaymentType = { valueOf: function(){return 'DownPaymentType';}, Type: 'DownPaymentTypeEnum', Index: 129, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DownPaymentAmountSC = { valueOf: function(){return 'DownPaymentAmountSC';}, Type: 'Edm.Double', Index: 130, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DownPaymentAmountFC = { valueOf: function(){return 'DownPaymentAmountFC';}, Type: 'Edm.Double', Index: 131, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.VatPercent = { valueOf: function(){return 'VatPercent';}, Type: 'Edm.Double', Index: 132, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ServiceGrossProfitPercent = { valueOf: function(){return 'ServiceGrossProfitPercent';}, Type: 'Edm.Double', Index: 133, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.OpeningRemarks = { valueOf: function(){return 'OpeningRemarks';}, Type: 'Edm.String', Index: 134, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ClosingRemarks = { valueOf: function(){return 'ClosingRemarks';}, Type: 'Edm.String', Index: 135, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.RoundingDiffAmount = { valueOf: function(){return 'RoundingDiffAmount';}, Type: 'Edm.Double', Index: 136, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.RoundingDiffAmountFC = { valueOf: function(){return 'RoundingDiffAmountFC';}, Type: 'Edm.Double', Index: 137, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.RoundingDiffAmountSC = { valueOf: function(){return 'RoundingDiffAmountSC';}, Type: 'Edm.Double', Index: 138, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Cancelled = { valueOf: function(){return 'Cancelled';}, Type: 'BoYesNoEnum', Index: 139, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.SignatureInputMessage = { valueOf: function(){return 'SignatureInputMessage';}, Type: 'Edm.String', Index: 140, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.SignatureDigest = { valueOf: function(){return 'SignatureDigest';}, Type: 'Edm.String', Index: 141, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.CertificationNumber = { valueOf: function(){return 'CertificationNumber';}, Type: 'Edm.String', Index: 142, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PrivateKeyVersion = { valueOf: function(){return 'PrivateKeyVersion';}, Type: 'Edm.Int32', Index: 143, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ControlAccount = { valueOf: function(){return 'ControlAccount';}, Type: 'Edm.String', Index: 144, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.InsuranceOperation347 = { valueOf: function(){return 'InsuranceOperation347';}, Type: 'BoYesNoEnum', Index: 145, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ArchiveNonremovableSalesQuotation = { valueOf: function(){return 'ArchiveNonremovableSalesQuotation';}, Type: 'BoYesNoEnum', Index: 146, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.GTSChecker = { valueOf: function(){return 'GTSChecker';}, Type: 'Edm.Int32', Index: 147, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.GTSPayee = { valueOf: function(){return 'GTSPayee';}, Type: 'Edm.Int32', Index: 148, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ExtraMonth = { valueOf: function(){return 'ExtraMonth';}, Type: 'Edm.Int32', Index: 149, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ExtraDays = { valueOf: function(){return 'ExtraDays';}, Type: 'Edm.Int32', Index: 150, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.CashDiscountDateOffset = { valueOf: function(){return 'CashDiscountDateOffset';}, Type: 'Edm.Int32', Index: 151, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.StartFrom = { valueOf: function(){return 'StartFrom';}, Type: 'BoPayTermDueTypes', Index: 152, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.NTSApproved = { valueOf: function(){return 'NTSApproved';}, Type: 'BoYesNoEnum', Index: 153, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ETaxWebSite = { valueOf: function(){return 'ETaxWebSite';}, Type: 'Edm.Int32', Index: 154, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ETaxNumber = { valueOf: function(){return 'ETaxNumber';}, Type: 'Edm.String', Index: 155, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.NTSApprovedNumber = { valueOf: function(){return 'NTSApprovedNumber';}, Type: 'Edm.String', Index: 156, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.EDocGenerationType = { valueOf: function(){return 'EDocGenerationType';}, Type: 'EDocGenerationTypeEnum', Index: 157, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.EDocSeries = { valueOf: function(){return 'EDocSeries';}, Type: 'Edm.Int32', Index: 158, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.EDocNum = { valueOf: function(){return 'EDocNum';}, Type: 'Edm.String', Index: 159, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.EDocExportFormat = { valueOf: function(){return 'EDocExportFormat';}, Type: 'Edm.Int32', Index: 160, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.EDocStatus = { valueOf: function(){return 'EDocStatus';}, Type: 'EDocStatusEnum', Index: 161, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.EDocErrorCode = { valueOf: function(){return 'EDocErrorCode';}, Type: 'Edm.String', Index: 162, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.EDocErrorMessage = { valueOf: function(){return 'EDocErrorMessage';}, Type: 'Edm.String', Index: 163, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DownPaymentStatus = { valueOf: function(){return 'DownPaymentStatus';}, Type: 'BoSoStatus', Index: 164, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.GroupSeries = { valueOf: function(){return 'GroupSeries';}, Type: 'Edm.Int32', Index: 165, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.GroupNumber = { valueOf: function(){return 'GroupNumber';}, Type: 'Edm.Int32', Index: 166, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.GroupHandWritten = { valueOf: function(){return 'GroupHandWritten';}, Type: 'BoYesNoEnum', Index: 167, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ReopenOriginalDocument = { valueOf: function(){return 'ReopenOriginalDocument';}, Type: 'BoYesNoEnum', Index: 168, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ReopenManuallyClosedOrCanceledDocument = { valueOf: function(){return 'ReopenManuallyClosedOrCanceledDocument';}, Type: 'BoYesNoEnum', Index: 169, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.CreateOnlineQuotation = { valueOf: function(){return 'CreateOnlineQuotation';}, Type: 'BoYesNoEnum', Index: 170, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.POSEquipmentNumber = { valueOf: function(){return 'POSEquipmentNumber';}, Type: 'Edm.String', Index: 171, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.POSManufacturerSerialNumber = { valueOf: function(){return 'POSManufacturerSerialNumber';}, Type: 'Edm.String', Index: 172, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.POSCashierNumber = { valueOf: function(){return 'POSCashierNumber';}, Type: 'Edm.Int32', Index: 173, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ApplyCurrentVATRatesForDownPaymentsToDraw = { valueOf: function(){return 'ApplyCurrentVATRatesForDownPaymentsToDraw';}, Type: 'BoYesNoEnum', Index: 174, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ClosingOption = { valueOf: function(){return 'ClosingOption';}, Type: 'ClosingOptionEnum', Index: 175, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.SpecifiedClosingDate = { valueOf: function(){return 'SpecifiedClosingDate';}, Type: 'Edm.DateTime', Index: 176, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.OpenForLandedCosts = { valueOf: function(){return 'OpenForLandedCosts';}, Type: 'BoYesNoEnum', Index: 177, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.AuthorizationStatus = { valueOf: function(){return 'AuthorizationStatus';}, Type: 'DocumentAuthorizationStatusEnum', Index: 178, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.TotalDiscountFC = { valueOf: function(){return 'TotalDiscountFC';}, Type: 'Edm.Double', Index: 179, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.TotalDiscountSC = { valueOf: function(){return 'TotalDiscountSC';}, Type: 'Edm.Double', Index: 180, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.RelevantToGTS = { valueOf: function(){return 'RelevantToGTS';}, Type: 'BoYesNoEnum', Index: 181, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.BPLName = { valueOf: function(){return 'BPLName';}, Type: 'Edm.String', Index: 182, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.VATRegNum = { valueOf: function(){return 'VATRegNum';}, Type: 'Edm.String', Index: 183, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.AnnualInvoiceDeclarationReference = { valueOf: function(){return 'AnnualInvoiceDeclarationReference';}, Type: 'Edm.Int32', Index: 184, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Supplier = { valueOf: function(){return 'Supplier';}, Type: 'Edm.String', Index: 185, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Releaser = { valueOf: function(){return 'Releaser';}, Type: 'Edm.Int32', Index: 186, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Receiver = { valueOf: function(){return 'Receiver';}, Type: 'Edm.Int32', Index: 187, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.BlanketAgreementNumber = { valueOf: function(){return 'BlanketAgreementNumber';}, Type: 'Edm.Int32', Index: 188, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.IsAlteration = { valueOf: function(){return 'IsAlteration';}, Type: 'BoYesNoEnum', Index: 189, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.CancelStatus = { valueOf: function(){return 'CancelStatus';}, Type: 'CancelStatusEnum', Index: 190, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.AssetValueDate = { valueOf: function(){return 'AssetValueDate';}, Type: 'Edm.DateTime', Index: 191, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Requester = { valueOf: function(){return 'Requester';}, Type: 'Edm.String', Index: 192, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.RequesterName = { valueOf: function(){return 'RequesterName';}, Type: 'Edm.String', Index: 193, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.RequesterBranch = { valueOf: function(){return 'RequesterBranch';}, Type: 'Edm.Int32', Index: 194, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.RequesterDepartment = { valueOf: function(){return 'RequesterDepartment';}, Type: 'Edm.Int32', Index: 195, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.RequesterEmail = { valueOf: function(){return 'RequesterEmail';}, Type: 'Edm.String', Index: 196, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.SendNotification = { valueOf: function(){return 'SendNotification';}, Type: 'BoYesNoEnum', Index: 197, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ReqType = { valueOf: function(){return 'ReqType';}, Type: 'Edm.Int32', Index: 198, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DocumentDelivery = { valueOf: function(){return 'DocumentDelivery';}, Type: 'DocumentDeliveryTypeEnum', Index: 199, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.AuthorizationCode = { valueOf: function(){return 'AuthorizationCode';}, Type: 'Edm.String', Index: 200, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.StartDeliveryDate = { valueOf: function(){return 'StartDeliveryDate';}, Type: 'Edm.DateTime', Index: 201, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.StartDeliveryTime = { valueOf: function(){return 'StartDeliveryTime';}, Type: 'Edm.Time', Index: 202, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.EndDeliveryDate = { valueOf: function(){return 'EndDeliveryDate';}, Type: 'Edm.DateTime', Index: 203, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.EndDeliveryTime = { valueOf: function(){return 'EndDeliveryTime';}, Type: 'Edm.Time', Index: 204, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.VehiclePlate = { valueOf: function(){return 'VehiclePlate';}, Type: 'Edm.String', Index: 205, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ATDocumentType = { valueOf: function(){return 'ATDocumentType';}, Type: 'Edm.String', Index: 206, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ElecCommStatus = { valueOf: function(){return 'ElecCommStatus';}, Type: 'ElecCommStatusEnum', Index: 207, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ElecCommMessage = { valueOf: function(){return 'ElecCommMessage';}, Type: 'Edm.String', Index: 208, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ReuseDocumentNum = { valueOf: function(){return 'ReuseDocumentNum';}, Type: 'BoYesNoEnum', Index: 209, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ReuseNotaFiscalNum = { valueOf: function(){return 'ReuseNotaFiscalNum';}, Type: 'BoYesNoEnum', Index: 210, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PrintSEPADirect = { valueOf: function(){return 'PrintSEPADirect';}, Type: 'BoYesNoEnum', Index: 211, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.FiscalDocNum = { valueOf: function(){return 'FiscalDocNum';}, Type: 'Edm.String', Index: 212, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.POSDailySummaryNo = { valueOf: function(){return 'POSDailySummaryNo';}, Type: 'Edm.Int32', Index: 213, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.POSReceiptNo = { valueOf: function(){return 'POSReceiptNo';}, Type: 'Edm.Int32', Index: 214, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PointOfIssueCode = { valueOf: function(){return 'PointOfIssueCode';}, Type: 'Edm.String', Index: 215, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Letter = { valueOf: function(){return 'Letter';}, Type: 'FolioLetterEnum', Index: 216, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.FolioNumberFrom = { valueOf: function(){return 'FolioNumberFrom';}, Type: 'Edm.Int32', Index: 217, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.FolioNumberTo = { valueOf: function(){return 'FolioNumberTo';}, Type: 'Edm.Int32', Index: 218, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.InterimType = { valueOf: function(){return 'InterimType';}, Type: 'BoInterimDocTypes', Index: 219, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.RelatedType = { valueOf: function(){return 'RelatedType';}, Type: 'Edm.Int32', Index: 220, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.RelatedEntry = { valueOf: function(){return 'RelatedEntry';}, Type: 'Edm.Int32', Index: 221, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DocumentTaxID = { valueOf: function(){return 'DocumentTaxID';}, Type: 'Edm.String', Index: 222, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DateOfReportingControlStatementVAT = { valueOf: function(){return 'DateOfReportingControlStatementVAT';}, Type: 'Edm.DateTime', Index: 223, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ReportingSectionControlStatementVAT = { valueOf: function(){return 'ReportingSectionControlStatementVAT';}, Type: 'Edm.String', Index: 224, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ExcludeFromTaxReportControlStatementVAT = { valueOf: function(){return 'ExcludeFromTaxReportControlStatementVAT';}, Type: 'BoYesNoEnum', Index: 225, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.POS_CashRegister = { valueOf: function(){return 'POS_CashRegister';}, Type: 'Edm.Int32', Index: 226, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.UpdateTime = { valueOf: function(){return 'UpdateTime';}, Type: 'Edm.Time', Index: 227, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.PriceMode = { valueOf: function(){return 'PriceMode';}, Type: 'PriceModeDocumentEnum', Index: 228, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.DownPaymentTrasactionID = { valueOf: function(){return 'DownPaymentTrasactionID';}, Type: 'Edm.String', Index: 229, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Revision = { valueOf: function(){return 'Revision';}, Type: 'BoYesNoEnum', Index: 230, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.OriginalRefNo = { valueOf: function(){return 'OriginalRefNo';}, Type: 'Edm.String', Index: 231, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.OriginalRefDate = { valueOf: function(){return 'OriginalRefDate';}, Type: 'Edm.DateTime', Index: 232, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.GSTTransactionType = { valueOf: function(){return 'GSTTransactionType';}, Type: 'GSTTransactionTypeEnum', Index: 233, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.OriginalCreditOrDebitNo = { valueOf: function(){return 'OriginalCreditOrDebitNo';}, Type: 'Edm.String', Index: 234, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.OriginalCreditOrDebitDate = { valueOf: function(){return 'OriginalCreditOrDebitDate';}, Type: 'Edm.DateTime', Index: 235, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ECommerceOperator = { valueOf: function(){return 'ECommerceOperator';}, Type: 'Edm.String', Index: 236, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ECommerceGSTIN = { valueOf: function(){return 'ECommerceGSTIN';}, Type: 'Edm.String', Index: 237, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.TaxInvoiceNo = { valueOf: function(){return 'TaxInvoiceNo';}, Type: 'Edm.String', Index: 238, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.TaxInvoiceDate = { valueOf: function(){return 'TaxInvoiceDate';}, Type: 'Edm.DateTime', Index: 239, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.ShipFrom = { valueOf: function(){return 'ShipFrom';}, Type: 'Edm.String', Index: 240, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.CommissionTrade = { valueOf: function(){return 'CommissionTrade';}, Type: 'CommissionTradeTypeEnum', Index: 241, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.CommissionTradeReturn = { valueOf: function(){return 'CommissionTradeReturn';}, Type: 'BoYesNoEnum', Index: 242, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.UseBillToAddrToDetermineTax = { valueOf: function(){return 'UseBillToAddrToDetermineTax';}, Type: 'BoYesNoEnum', Index: 243, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.IssuingReason = { valueOf: function(){return 'IssuingReason';}, Type: 'Edm.Int32', Index: 244, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.U_BusiType = { valueOf: function(){return 'U_BusiType';}, Type: 'Edm.String', Index: 245, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.U_OcrCode = { valueOf: function(){return 'U_OcrCode';}, Type: 'Edm.String', Index: 246, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.Document.Document_ApprovalRequests = { valueOf: function(){return 'Document_ApprovalRequests';}, Type: 'Document_ApprovalRequest', Index: 247, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.Document.DocumentLines = { valueOf: function(){return 'DocumentLines';}, Type: 'DocumentLine', Index: 248, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.Document.EWayBillDetails = { valueOf: function(){return 'EWayBillDetails';}, Type: 'EWayBillDetails', Index: 249, Nullable: true, IsArray: false, IsComplex: true };
SAPB1.Document.ElectronicProtocols = { valueOf: function(){return 'ElectronicProtocols';}, Type: 'ElectronicProtocol', Index: 250, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.Document.DocumentAdditionalExpenses = { valueOf: function(){return 'DocumentAdditionalExpenses';}, Type: 'DocumentAdditionalExpense', Index: 251, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.Document.WithholdingTaxDataWTXCollection = { valueOf: function(){return 'WithholdingTaxDataWTXCollection';}, Type: 'WithholdingTaxDataWTX', Index: 252, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.Document.WithholdingTaxDataCollection = { valueOf: function(){return 'WithholdingTaxDataCollection';}, Type: 'WithholdingTaxData', Index: 253, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.Document.DocumentPackages = { valueOf: function(){return 'DocumentPackages';}, Type: 'DocumentPackage', Index: 254, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.Document.DocumentSpecialLines = { valueOf: function(){return 'DocumentSpecialLines';}, Type: 'DocumentSpecialLine', Index: 255, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.Document.DocumentInstallments = { valueOf: function(){return 'DocumentInstallments';}, Type: 'DocumentInstallment', Index: 256, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.Document.DownPaymentsToDraw = { valueOf: function(){return 'DownPaymentsToDraw';}, Type: 'DownPaymentToDraw', Index: 257, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.Document.TaxExtension = { valueOf: function(){return 'TaxExtension';}, Type: 'TaxExtension', Index: 258, Nullable: true, IsArray: false, IsComplex: true };
SAPB1.Document.AddressExtension = { valueOf: function(){return 'AddressExtension';}, Type: 'AddressExtension', Index: 259, Nullable: true, IsArray: false, IsComplex: true };
SAPB1.Document.prototype.DocEntry = new Number();
SAPB1.Document.prototype.DocNum = new Number();
SAPB1.Document.prototype.DocType = new String();
SAPB1.Document.prototype.HandWritten = new String();
SAPB1.Document.prototype.Printed = new String();
SAPB1.Document.prototype.DocDate = new String();
SAPB1.Document.prototype.DocDueDate = new String();
SAPB1.Document.prototype.CardCode = new String();
SAPB1.Document.prototype.CardName = new String();
SAPB1.Document.prototype.Address = new String();
SAPB1.Document.prototype.NumAtCard = new String();
SAPB1.Document.prototype.DocTotal = new Number();
SAPB1.Document.prototype.AttachmentEntry = new Number();
SAPB1.Document.prototype.DocCurrency = new String();
SAPB1.Document.prototype.DocRate = new Number();
SAPB1.Document.prototype.Reference1 = new String();
SAPB1.Document.prototype.Reference2 = new String();
SAPB1.Document.prototype.Comments = new String();
SAPB1.Document.prototype.JournalMemo = new String();
SAPB1.Document.prototype.PaymentGroupCode = new Number();
SAPB1.Document.prototype.DocTime = new String();
SAPB1.Document.prototype.SalesPersonCode = new Number();
SAPB1.Document.prototype.TransportationCode = new Number();
SAPB1.Document.prototype.Confirmed = new String();
SAPB1.Document.prototype.ImportFileNum = new Number();
SAPB1.Document.prototype.SummeryType = new String();
SAPB1.Document.prototype.ContactPersonCode = new Number();
SAPB1.Document.prototype.ShowSCN = new String();
SAPB1.Document.prototype.Series = new Number();
SAPB1.Document.prototype.TaxDate = new String();
SAPB1.Document.prototype.PartialSupply = new String();
SAPB1.Document.prototype.DocObjectCode = new String();
SAPB1.Document.prototype.ShipToCode = new String();
SAPB1.Document.prototype.Indicator = new String();
SAPB1.Document.prototype.FederalTaxID = new String();
SAPB1.Document.prototype.DiscountPercent = new Number();
SAPB1.Document.prototype.PaymentReference = new String();
SAPB1.Document.prototype.CreationDate = new String();
SAPB1.Document.prototype.UpdateDate = new String();
SAPB1.Document.prototype.FinancialPeriod = new Number();
SAPB1.Document.prototype.TransNum = new Number();
SAPB1.Document.prototype.VatSum = new Number();
SAPB1.Document.prototype.VatSumSys = new Number();
SAPB1.Document.prototype.VatSumFc = new Number();
SAPB1.Document.prototype.NetProcedure = new String();
SAPB1.Document.prototype.DocTotalFc = new Number();
SAPB1.Document.prototype.DocTotalSys = new Number();
SAPB1.Document.prototype.Form1099 = new Number();
SAPB1.Document.prototype.Box1099 = new String();
SAPB1.Document.prototype.RevisionPo = new String();
SAPB1.Document.prototype.RequriedDate = new String();
SAPB1.Document.prototype.CancelDate = new String();
SAPB1.Document.prototype.BlockDunning = new String();
SAPB1.Document.prototype.Submitted = new String();
SAPB1.Document.prototype.Segment = new Number();
SAPB1.Document.prototype.PickStatus = new String();
SAPB1.Document.prototype.Pick = new String();
SAPB1.Document.prototype.PaymentMethod = new String();
SAPB1.Document.prototype.PaymentBlock = new String();
SAPB1.Document.prototype.PaymentBlockEntry = new Number();
SAPB1.Document.prototype.CentralBankIndicator = new String();
SAPB1.Document.prototype.MaximumCashDiscount = new String();
SAPB1.Document.prototype.Reserve = new String();
SAPB1.Document.prototype.Project = new String();
SAPB1.Document.prototype.ExemptionValidityDateFrom = new String();
SAPB1.Document.prototype.ExemptionValidityDateTo = new String();
SAPB1.Document.prototype.WareHouseUpdateType = new String();
SAPB1.Document.prototype.Rounding = new String();
SAPB1.Document.prototype.ExternalCorrectedDocNum = new String();
SAPB1.Document.prototype.InternalCorrectedDocNum = new Number();
SAPB1.Document.prototype.NextCorrectingDocument = new Number();
SAPB1.Document.prototype.DeferredTax = new String();
SAPB1.Document.prototype.TaxExemptionLetterNum = new String();
SAPB1.Document.prototype.WTApplied = new Number();
SAPB1.Document.prototype.WTAppliedFC = new Number();
SAPB1.Document.prototype.BillOfExchangeReserved = new String();
SAPB1.Document.prototype.AgentCode = new String();
SAPB1.Document.prototype.WTAppliedSC = new Number();
SAPB1.Document.prototype.TotalEqualizationTax = new Number();
SAPB1.Document.prototype.TotalEqualizationTaxFC = new Number();
SAPB1.Document.prototype.TotalEqualizationTaxSC = new Number();
SAPB1.Document.prototype.NumberOfInstallments = new Number();
SAPB1.Document.prototype.ApplyTaxOnFirstInstallment = new String();
SAPB1.Document.prototype.WTNonSubjectAmount = new Number();
SAPB1.Document.prototype.WTNonSubjectAmountSC = new Number();
SAPB1.Document.prototype.WTNonSubjectAmountFC = new Number();
SAPB1.Document.prototype.WTExemptedAmount = new Number();
SAPB1.Document.prototype.WTExemptedAmountSC = new Number();
SAPB1.Document.prototype.WTExemptedAmountFC = new Number();
SAPB1.Document.prototype.BaseAmount = new Number();
SAPB1.Document.prototype.BaseAmountSC = new Number();
SAPB1.Document.prototype.BaseAmountFC = new Number();
SAPB1.Document.prototype.WTAmount = new Number();
SAPB1.Document.prototype.WTAmountSC = new Number();
SAPB1.Document.prototype.WTAmountFC = new Number();
SAPB1.Document.prototype.VatDate = new String();
SAPB1.Document.prototype.DocumentsOwner = new Number();
SAPB1.Document.prototype.FolioPrefixString = new String();
SAPB1.Document.prototype.FolioNumber = new Number();
SAPB1.Document.prototype.DocumentSubType = new String();
SAPB1.Document.prototype.BPChannelCode = new String();
SAPB1.Document.prototype.BPChannelContact = new Number();
SAPB1.Document.prototype.Address2 = new String();
SAPB1.Document.prototype.DocumentStatus = new String();
SAPB1.Document.prototype.PeriodIndicator = new String();
SAPB1.Document.prototype.PayToCode = new String();
SAPB1.Document.prototype.ManualNumber = new String();
SAPB1.Document.prototype.UseShpdGoodsAct = new String();
SAPB1.Document.prototype.IsPayToBank = new String();
SAPB1.Document.prototype.PayToBankCountry = new String();
SAPB1.Document.prototype.PayToBankCode = new String();
SAPB1.Document.prototype.PayToBankAccountNo = new String();
SAPB1.Document.prototype.PayToBankBranch = new String();
SAPB1.Document.prototype.BPL_IDAssignedToInvoice = new Number();
SAPB1.Document.prototype.DownPayment = new Number();
SAPB1.Document.prototype.ReserveInvoice = new String();
SAPB1.Document.prototype.LanguageCode = new Number();
SAPB1.Document.prototype.TrackingNumber = new String();
SAPB1.Document.prototype.PickRemark = new String();
SAPB1.Document.prototype.ClosingDate = new String();
SAPB1.Document.prototype.SequenceCode = new Number();
SAPB1.Document.prototype.SequenceSerial = new Number();
SAPB1.Document.prototype.SeriesString = new String();
SAPB1.Document.prototype.SubSeriesString = new String();
SAPB1.Document.prototype.SequenceModel = new String();
SAPB1.Document.prototype.UseCorrectionVATGroup = new String();
SAPB1.Document.prototype.TotalDiscount = new Number();
SAPB1.Document.prototype.DownPaymentAmount = new Number();
SAPB1.Document.prototype.DownPaymentPercentage = new Number();
SAPB1.Document.prototype.DownPaymentType = new String();
SAPB1.Document.prototype.DownPaymentAmountSC = new Number();
SAPB1.Document.prototype.DownPaymentAmountFC = new Number();
SAPB1.Document.prototype.VatPercent = new Number();
SAPB1.Document.prototype.ServiceGrossProfitPercent = new Number();
SAPB1.Document.prototype.OpeningRemarks = new String();
SAPB1.Document.prototype.ClosingRemarks = new String();
SAPB1.Document.prototype.RoundingDiffAmount = new Number();
SAPB1.Document.prototype.RoundingDiffAmountFC = new Number();
SAPB1.Document.prototype.RoundingDiffAmountSC = new Number();
SAPB1.Document.prototype.Cancelled = new String();
SAPB1.Document.prototype.SignatureInputMessage = new String();
SAPB1.Document.prototype.SignatureDigest = new String();
SAPB1.Document.prototype.CertificationNumber = new String();
SAPB1.Document.prototype.PrivateKeyVersion = new Number();
SAPB1.Document.prototype.ControlAccount = new String();
SAPB1.Document.prototype.InsuranceOperation347 = new String();
SAPB1.Document.prototype.ArchiveNonremovableSalesQuotation = new String();
SAPB1.Document.prototype.GTSChecker = new Number();
SAPB1.Document.prototype.GTSPayee = new Number();
SAPB1.Document.prototype.ExtraMonth = new Number();
SAPB1.Document.prototype.ExtraDays = new Number();
SAPB1.Document.prototype.CashDiscountDateOffset = new Number();
SAPB1.Document.prototype.StartFrom = new String();
SAPB1.Document.prototype.NTSApproved = new String();
SAPB1.Document.prototype.ETaxWebSite = new Number();
SAPB1.Document.prototype.ETaxNumber = new String();
SAPB1.Document.prototype.NTSApprovedNumber = new String();
SAPB1.Document.prototype.EDocGenerationType = new String();
SAPB1.Document.prototype.EDocSeries = new Number();
SAPB1.Document.prototype.EDocNum = new String();
SAPB1.Document.prototype.EDocExportFormat = new Number();
SAPB1.Document.prototype.EDocStatus = new String();
SAPB1.Document.prototype.EDocErrorCode = new String();
SAPB1.Document.prototype.EDocErrorMessage = new String();
SAPB1.Document.prototype.DownPaymentStatus = new String();
SAPB1.Document.prototype.GroupSeries = new Number();
SAPB1.Document.prototype.GroupNumber = new Number();
SAPB1.Document.prototype.GroupHandWritten = new String();
SAPB1.Document.prototype.ReopenOriginalDocument = new String();
SAPB1.Document.prototype.ReopenManuallyClosedOrCanceledDocument = new String();
SAPB1.Document.prototype.CreateOnlineQuotation = new String();
SAPB1.Document.prototype.POSEquipmentNumber = new String();
SAPB1.Document.prototype.POSManufacturerSerialNumber = new String();
SAPB1.Document.prototype.POSCashierNumber = new Number();
SAPB1.Document.prototype.ApplyCurrentVATRatesForDownPaymentsToDraw = new String();
SAPB1.Document.prototype.ClosingOption = new String();
SAPB1.Document.prototype.SpecifiedClosingDate = new String();
SAPB1.Document.prototype.OpenForLandedCosts = new String();
SAPB1.Document.prototype.AuthorizationStatus = new String();
SAPB1.Document.prototype.TotalDiscountFC = new Number();
SAPB1.Document.prototype.TotalDiscountSC = new Number();
SAPB1.Document.prototype.RelevantToGTS = new String();
SAPB1.Document.prototype.BPLName = new String();
SAPB1.Document.prototype.VATRegNum = new String();
SAPB1.Document.prototype.AnnualInvoiceDeclarationReference = new Number();
SAPB1.Document.prototype.Supplier = new String();
SAPB1.Document.prototype.Releaser = new Number();
SAPB1.Document.prototype.Receiver = new Number();
SAPB1.Document.prototype.BlanketAgreementNumber = new Number();
SAPB1.Document.prototype.IsAlteration = new String();
SAPB1.Document.prototype.CancelStatus = new String();
SAPB1.Document.prototype.AssetValueDate = new String();
SAPB1.Document.prototype.Requester = new String();
SAPB1.Document.prototype.RequesterName = new String();
SAPB1.Document.prototype.RequesterBranch = new Number();
SAPB1.Document.prototype.RequesterDepartment = new Number();
SAPB1.Document.prototype.RequesterEmail = new String();
SAPB1.Document.prototype.SendNotification = new String();
SAPB1.Document.prototype.ReqType = new Number();
SAPB1.Document.prototype.DocumentDelivery = new String();
SAPB1.Document.prototype.AuthorizationCode = new String();
SAPB1.Document.prototype.StartDeliveryDate = new String();
SAPB1.Document.prototype.StartDeliveryTime = new String();
SAPB1.Document.prototype.EndDeliveryDate = new String();
SAPB1.Document.prototype.EndDeliveryTime = new String();
SAPB1.Document.prototype.VehiclePlate = new String();
SAPB1.Document.prototype.ATDocumentType = new String();
SAPB1.Document.prototype.ElecCommStatus = new String();
SAPB1.Document.prototype.ElecCommMessage = new String();
SAPB1.Document.prototype.ReuseDocumentNum = new String();
SAPB1.Document.prototype.ReuseNotaFiscalNum = new String();
SAPB1.Document.prototype.PrintSEPADirect = new String();
SAPB1.Document.prototype.FiscalDocNum = new String();
SAPB1.Document.prototype.POSDailySummaryNo = new Number();
SAPB1.Document.prototype.POSReceiptNo = new Number();
SAPB1.Document.prototype.PointOfIssueCode = new String();
SAPB1.Document.prototype.Letter = new String();
SAPB1.Document.prototype.FolioNumberFrom = new Number();
SAPB1.Document.prototype.FolioNumberTo = new Number();
SAPB1.Document.prototype.InterimType = new String();
SAPB1.Document.prototype.RelatedType = new Number();
SAPB1.Document.prototype.RelatedEntry = new Number();
SAPB1.Document.prototype.DocumentTaxID = new String();
SAPB1.Document.prototype.DateOfReportingControlStatementVAT = new String();
SAPB1.Document.prototype.ReportingSectionControlStatementVAT = new String();
SAPB1.Document.prototype.ExcludeFromTaxReportControlStatementVAT = new String();
SAPB1.Document.prototype.POS_CashRegister = new Number();
SAPB1.Document.prototype.UpdateTime = new String();
SAPB1.Document.prototype.PriceMode = new String();
SAPB1.Document.prototype.DownPaymentTrasactionID = new String();
SAPB1.Document.prototype.Revision = new String();
SAPB1.Document.prototype.OriginalRefNo = new String();
SAPB1.Document.prototype.OriginalRefDate = new String();
SAPB1.Document.prototype.GSTTransactionType = new String();
SAPB1.Document.prototype.OriginalCreditOrDebitNo = new String();
SAPB1.Document.prototype.OriginalCreditOrDebitDate = new String();
SAPB1.Document.prototype.ECommerceOperator = new String();
SAPB1.Document.prototype.ECommerceGSTIN = new String();
SAPB1.Document.prototype.TaxInvoiceNo = new String();
SAPB1.Document.prototype.TaxInvoiceDate = new String();
SAPB1.Document.prototype.ShipFrom = new String();
SAPB1.Document.prototype.CommissionTrade = new String();
SAPB1.Document.prototype.CommissionTradeReturn = new String();
SAPB1.Document.prototype.UseBillToAddrToDetermineTax = new String();
SAPB1.Document.prototype.IssuingReason = new Number();
SAPB1.Document.prototype.U_BusiType = new String();
SAPB1.Document.prototype.U_OcrCode = new String();
SAPB1.Document.prototype.Document_ApprovalRequests = new Document_ApprovalRequestCollection();
SAPB1.Document.prototype.DocumentLines = new DocumentLineCollection();
SAPB1.Document.prototype.EWayBillDetails = new EWayBillDetails();
SAPB1.Document.prototype.ElectronicProtocols = new ElectronicProtocolCollection();
SAPB1.Document.prototype.DocumentAdditionalExpenses = new DocumentAdditionalExpenseCollection();
SAPB1.Document.prototype.WithholdingTaxDataWTXCollection = new WithholdingTaxDataWTXCollection();
SAPB1.Document.prototype.WithholdingTaxDataCollection = new WithholdingTaxDataCollection();
SAPB1.Document.prototype.DocumentPackages = new DocumentPackageCollection();
SAPB1.Document.prototype.DocumentSpecialLines = new DocumentSpecialLineCollection();
SAPB1.Document.prototype.DocumentInstallments = new DocumentInstallmentCollection();
SAPB1.Document.prototype.DownPaymentsToDraw = new DownPaymentToDrawCollection();
SAPB1.Document.prototype.TaxExtension = new TaxExtension();
SAPB1.Document.prototype.AddressExtension = new AddressExtension();

SAPB1.Document.Document_ApprovalRequest = Document_ApprovalRequest
SAPB1.Document.Document_ApprovalRequestCollection = Document_ApprovalRequestCollection
SAPB1.Document.DocumentLine = DocumentLine
SAPB1.Document.DocumentLineCollection = DocumentLineCollection
SAPB1.Document.EWayBillDetails = EWayBillDetails
SAPB1.Document.ElectronicProtocol = ElectronicProtocol
SAPB1.Document.ElectronicProtocolCollection = ElectronicProtocolCollection
SAPB1.Document.DocumentAdditionalExpense = DocumentAdditionalExpense
SAPB1.Document.DocumentAdditionalExpenseCollection = DocumentAdditionalExpenseCollection
SAPB1.Document.WithholdingTaxDataWTX = WithholdingTaxDataWTX
SAPB1.Document.WithholdingTaxDataWTXCollection = WithholdingTaxDataWTXCollection
SAPB1.Document.WithholdingTaxData = WithholdingTaxData
SAPB1.Document.WithholdingTaxDataCollection = WithholdingTaxDataCollection
SAPB1.Document.DocumentPackage = DocumentPackage
SAPB1.Document.DocumentPackageCollection = DocumentPackageCollection
SAPB1.Document.DocumentSpecialLine = DocumentSpecialLine
SAPB1.Document.DocumentSpecialLineCollection = DocumentSpecialLineCollection
SAPB1.Document.DocumentInstallment = DocumentInstallment
SAPB1.Document.DocumentInstallmentCollection = DocumentInstallmentCollection
SAPB1.Document.DownPaymentToDraw = DownPaymentToDraw
SAPB1.Document.DownPaymentToDrawCollection = DownPaymentToDrawCollection
SAPB1.Document.TaxExtension = TaxExtension
SAPB1.Document.AddressExtension = AddressExtension

SAPB1.Document.BoDocumentTypes = BoDocumentTypes
SAPB1.Document.BoYesNoEnum = BoYesNoEnum
SAPB1.Document.PrintStatusEnum = PrintStatusEnum
SAPB1.Document.BoDocSummaryTypes = BoDocSummaryTypes
SAPB1.Document.BoObjectTypes = BoObjectTypes
SAPB1.Document.BoDocWhsUpdateTypes = BoDocWhsUpdateTypes
SAPB1.Document.BoDocumentSubType = BoDocumentSubType
SAPB1.Document.BoStatus = BoStatus
SAPB1.Document.DownPaymentTypeEnum = DownPaymentTypeEnum
SAPB1.Document.BoPayTermDueTypes = BoPayTermDueTypes
SAPB1.Document.EDocGenerationTypeEnum = EDocGenerationTypeEnum
SAPB1.Document.EDocStatusEnum = EDocStatusEnum
SAPB1.Document.BoSoStatus = BoSoStatus
SAPB1.Document.ClosingOptionEnum = ClosingOptionEnum
SAPB1.Document.DocumentAuthorizationStatusEnum = DocumentAuthorizationStatusEnum
SAPB1.Document.CancelStatusEnum = CancelStatusEnum
SAPB1.Document.DocumentDeliveryTypeEnum = DocumentDeliveryTypeEnum
SAPB1.Document.ElecCommStatusEnum = ElecCommStatusEnum
SAPB1.Document.FolioLetterEnum = FolioLetterEnum
SAPB1.Document.BoInterimDocTypes = BoInterimDocTypes
SAPB1.Document.PriceModeDocumentEnum = PriceModeDocumentEnum
SAPB1.Document.GSTTransactionTypeEnum = GSTTransactionTypeEnum
SAPB1.Document.CommissionTradeTypeEnum = CommissionTradeTypeEnum

SAPB1.Document.create = function (rawObject) {
    var instance = new SAPB1.Document();
    for (var prop in rawObject) {
        if (rawObject.hasOwnProperty(prop)) {
            if (SAPB1.Document.prototype.hasOwnProperty(prop)) {
                if (instance[prop] instanceof SAPB1.Collection) {
                    var collectionInstance = instance[prop].constructor.create(rawObject[prop]);
                    instance[prop] = collectionInstance;
                } else if (instance[prop] instanceof SAPB1.ComplexType) {
                    var complexInstance = instance[prop].constructor.create(rawObject[prop]);
                    instance[prop] = complexInstance;
                }
                else {
                    instance[prop] = rawObject[prop];
                }
            }
        }
    }
    return instance;
}


module.exports = SAPB1.Document;
