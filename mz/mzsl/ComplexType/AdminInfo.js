var ExtendedAdminInfo = require('ComplexType/ExtendedAdminInfo')

var BoYesNoEnum = require('EnumType/BoYesNoEnum')
var BoAlertTypeforWHStockEnum = require('EnumType/BoAlertTypeforWHStockEnum')
var BoTimeTemplate = require('EnumType/BoTimeTemplate')
var BoDateTemplate = require('EnumType/BoDateTemplate')
var BoCurrencyCheck = require('EnumType/BoCurrencyCheck')
var BoBlockBudget = require('EnumType/BoBlockBudget')
var BoBudgetAlert = require('EnumType/BoBudgetAlert')
var BoInventorySystem = require('EnumType/BoInventorySystem')
var BoDefaultBatchStatus = require('EnumType/BoDefaultBatchStatus')
var BoGLMethods = require('EnumType/BoGLMethods')
var BoUniqueSerialNumber = require('EnumType/BoUniqueSerialNumber')
var BoConsumptionMethod = require('EnumType/BoConsumptionMethod')
var GTSResponseToExceedingEnum = require('EnumType/GTSResponseToExceedingEnum')
var IssuePrimarilyByEnum = require('EnumType/IssuePrimarilyByEnum')
var TaxRateDeterminationEnum = require('EnumType/TaxRateDeterminationEnum')
var PriceProceedMethodEnum = require('EnumType/PriceProceedMethodEnum')
var BADivationAlertLevelEnum = require('EnumType/BADivationAlertLevelEnum')
var DisplayBatchQtyUoMByEnum = require('EnumType/DisplayBatchQtyUoMByEnum')
var BoDataOwnershipManageMethodEnum = require('EnumType/BoDataOwnershipManageMethodEnum')

var ServiceLayerModule = require('Base/ServiceLayerModule.js');

//Workaround the possible intellisense bug of VS
if (typeof (SAPB1) === "undefined") {
    SAPB1 = {};
}

SAPB1.AdminInfo = function () {
}
SAPB1.AdminInfo.prototype = new SAPB1.ComplexType();
SAPB1.AdminInfo.prototype.constructor = SAPB1.AdminInfo;
SAPB1.AdminInfo.Code = { valueOf: function(){return 'Code';}, Type: 'Edm.Int32', Index: 0, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CompanyName = { valueOf: function(){return 'CompanyName';}, Type: 'Edm.String', Index: 1, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.Address = { valueOf: function(){return 'Address';}, Type: 'Edm.String', Index: 2, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.Country = { valueOf: function(){return 'Country';}, Type: 'Edm.String', Index: 3, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PrintingHeader = { valueOf: function(){return 'PrintingHeader';}, Type: 'Edm.String', Index: 4, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PhoneNumber1 = { valueOf: function(){return 'PhoneNumber1';}, Type: 'Edm.String', Index: 5, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PhoneNumber2 = { valueOf: function(){return 'PhoneNumber2';}, Type: 'Edm.String', Index: 6, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.FaxNumber = { valueOf: function(){return 'FaxNumber';}, Type: 'Edm.String', Index: 7, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.eMail = { valueOf: function(){return 'eMail';}, Type: 'Edm.String', Index: 8, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ManagingDirector = { valueOf: function(){return 'ManagingDirector';}, Type: 'Edm.String', Index: 9, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ChartofAccountsTemplate = { valueOf: function(){return 'ChartofAccountsTemplate';}, Type: 'Edm.String', Index: 10, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.LocalCurrency = { valueOf: function(){return 'LocalCurrency';}, Type: 'Edm.String', Index: 11, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.SystemCurrency = { valueOf: function(){return 'SystemCurrency';}, Type: 'Edm.String', Index: 12, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CreditBalancewithMinusSign = { valueOf: function(){return 'CreditBalancewithMinusSign';}, Type: 'BoYesNoEnum', Index: 13, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.StandardUnitofLength = { valueOf: function(){return 'StandardUnitofLength';}, Type: 'Edm.Int32', Index: 14, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.WeightUnitDefault = { valueOf: function(){return 'WeightUnitDefault';}, Type: 'Edm.Int32', Index: 15, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DirectIndirectRate = { valueOf: function(){return 'DirectIndirectRate';}, Type: 'BoYesNoEnum', Index: 16, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.MinimumAmountfor347Report = { valueOf: function(){return 'MinimumAmountfor347Report';}, Type: 'Edm.Double', Index: 17, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.SetItemsWarehouses = { valueOf: function(){return 'SetItemsWarehouses';}, Type: 'BoYesNoEnum', Index: 18, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BankCountry = { valueOf: function(){return 'BankCountry';}, Type: 'Edm.String', Index: 19, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.FederalTaxID = { valueOf: function(){return 'FederalTaxID';}, Type: 'Edm.String', Index: 20, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.TaxOffice = { valueOf: function(){return 'TaxOffice';}, Type: 'Edm.String', Index: 21, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DeductionFileNo = { valueOf: function(){return 'DeductionFileNo';}, Type: 'Edm.String', Index: 22, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.TaxCollection = { valueOf: function(){return 'TaxCollection';}, Type: 'BoYesNoEnum', Index: 23, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.TaxDefinition = { valueOf: function(){return 'TaxDefinition';}, Type: 'BoYesNoEnum', Index: 24, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.TaxPercentage = { valueOf: function(){return 'TaxPercentage';}, Type: 'Edm.Double', Index: 25, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AdvancesonCorpIncomeTax = { valueOf: function(){return 'AdvancesonCorpIncomeTax';}, Type: 'Edm.Double', Index: 26, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.WithTax = { valueOf: function(){return 'WithTax';}, Type: 'Edm.Double', Index: 27, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.WithholdingTaxVendorDdct = { valueOf: function(){return 'WithholdingTaxVendorDdct';}, Type: 'BoYesNoEnum', Index: 28, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CustomersDeductionatSource = { valueOf: function(){return 'CustomersDeductionatSource';}, Type: 'BoYesNoEnum', Index: 29, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.WithholdingTaxTdctPercnt = { valueOf: function(){return 'WithholdingTaxTdctPercnt';}, Type: 'Edm.Double', Index: 30, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.WithholdingTaxDdctExpired = { valueOf: function(){return 'WithholdingTaxDdctExpired';}, Type: 'Edm.DateTime', Index: 31, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.WithholdingTaxDdctOffice = { valueOf: function(){return 'WithholdingTaxDdctOffice';}, Type: 'Edm.String', Index: 32, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CommitmentRestriction = { valueOf: function(){return 'CommitmentRestriction';}, Type: 'BoYesNoEnum', Index: 33, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CreditRestriction = { valueOf: function(){return 'CreditRestriction';}, Type: 'BoYesNoEnum', Index: 34, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.RestrictSales = { valueOf: function(){return 'RestrictSales';}, Type: 'BoYesNoEnum', Index: 35, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.RestrictDelNotesPO = { valueOf: function(){return 'RestrictDelNotesPO';}, Type: 'BoYesNoEnum', Index: 36, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.RestrictOrders = { valueOf: function(){return 'RestrictOrders';}, Type: 'BoYesNoEnum', Index: 37, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ConsiderDelNotesinSalesR = { valueOf: function(){return 'ConsiderDelNotesinSalesR';}, Type: 'BoYesNoEnum', Index: 38, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CreditDepositType = { valueOf: function(){return 'CreditDepositType';}, Type: 'BoYesNoEnum', Index: 39, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.UseTax = { valueOf: function(){return 'UseTax';}, Type: 'BoYesNoEnum', Index: 40, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.SplitPO = { valueOf: function(){return 'SplitPO';}, Type: 'BoYesNoEnum', Index: 41, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AltNameForApInvoice = { valueOf: function(){return 'AltNameForApInvoice';}, Type: 'Edm.String', Index: 42, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AltNameforCreditMemo = { valueOf: function(){return 'AltNameforCreditMemo';}, Type: 'Edm.String', Index: 43, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AltNameForGoodsReceipt = { valueOf: function(){return 'AltNameForGoodsReceipt';}, Type: 'Edm.String', Index: 44, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AltNameForGoodsReturn = { valueOf: function(){return 'AltNameForGoodsReturn';}, Type: 'Edm.String', Index: 45, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AltNameForPurchase = { valueOf: function(){return 'AltNameForPurchase';}, Type: 'Edm.String', Index: 46, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AlertTypeforWHStock = { valueOf: function(){return 'AlertTypeforWHStock';}, Type: 'BoAlertTypeforWHStockEnum', Index: 47, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.SetCommissionbyCustomer = { valueOf: function(){return 'SetCommissionbyCustomer';}, Type: 'BoYesNoEnum', Index: 48, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.SetCommissionbyItem = { valueOf: function(){return 'SetCommissionbyItem';}, Type: 'BoYesNoEnum', Index: 49, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.SetCommissionbySE = { valueOf: function(){return 'SetCommissionbySE';}, Type: 'BoYesNoEnum', Index: 50, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DefaultCustomerPaymentTerms = { valueOf: function(){return 'DefaultCustomerPaymentTerms';}, Type: 'Edm.Int32', Index: 51, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DefaultVendorPaymentTerms = { valueOf: function(){return 'DefaultVendorPaymentTerms';}, Type: 'Edm.Int32', Index: 52, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CalculateGrossProfitperTra = { valueOf: function(){return 'CalculateGrossProfitperTra';}, Type: 'BoYesNoEnum', Index: 53, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PriceListforCostPrice = { valueOf: function(){return 'PriceListforCostPrice';}, Type: 'Edm.Int32', Index: 54, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.GrossProfitAfterSale = { valueOf: function(){return 'GrossProfitAfterSale';}, Type: 'BoYesNoEnum', Index: 55, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DisplayPriceforPriceOnly = { valueOf: function(){return 'DisplayPriceforPriceOnly';}, Type: 'BoYesNoEnum', Index: 56, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CalculateTaxinSalesQuotati = { valueOf: function(){return 'CalculateTaxinSalesQuotati';}, Type: 'BoYesNoEnum', Index: 57, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BaseField = { valueOf: function(){return 'BaseField';}, Type: 'BoYesNoEnum', Index: 58, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AllowClosedSalesQuotations = { valueOf: function(){return 'AllowClosedSalesQuotations';}, Type: 'BoYesNoEnum', Index: 59, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.UserConversionCode = { valueOf: function(){return 'UserConversionCode';}, Type: 'BoYesNoEnum', Index: 60, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CompanyColor = { valueOf: function(){return 'CompanyColor';}, Type: 'Edm.Int32', Index: 61, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.TotalsAccuracy = { valueOf: function(){return 'TotalsAccuracy';}, Type: 'Edm.Int32', Index: 62, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AccuracyofQuantities = { valueOf: function(){return 'AccuracyofQuantities';}, Type: 'Edm.Int32', Index: 63, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PriceAccuracy = { valueOf: function(){return 'PriceAccuracy';}, Type: 'Edm.Int32', Index: 64, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.RateAccuracy = { valueOf: function(){return 'RateAccuracy';}, Type: 'Edm.Int32', Index: 65, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PercentageAccuracy = { valueOf: function(){return 'PercentageAccuracy';}, Type: 'Edm.Int32', Index: 66, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.MeasuringAccuracy = { valueOf: function(){return 'MeasuringAccuracy';}, Type: 'Edm.Int32', Index: 67, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.QueryAccuracy = { valueOf: function(){return 'QueryAccuracy';}, Type: 'Edm.Int32', Index: 68, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AddressinForeignLanguage = { valueOf: function(){return 'AddressinForeignLanguage';}, Type: 'Edm.String', Index: 69, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DefaultTaxCode = { valueOf: function(){return 'DefaultTaxCode';}, Type: 'Edm.String', Index: 70, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.LetterHeaderinForeignLangu = { valueOf: function(){return 'LetterHeaderinForeignLangu';}, Type: 'Edm.String', Index: 71, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PhoneNumber1ForeignLang = { valueOf: function(){return 'PhoneNumber1ForeignLang';}, Type: 'Edm.String', Index: 72, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PhoneNumber2ForeignLang = { valueOf: function(){return 'PhoneNumber2ForeignLang';}, Type: 'Edm.String', Index: 73, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.FaxNumberForeignLang = { valueOf: function(){return 'FaxNumberForeignLang';}, Type: 'Edm.String', Index: 74, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ManagingDirectorForeignLan = { valueOf: function(){return 'ManagingDirectorForeignLan';}, Type: 'Edm.String', Index: 75, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.TimeTemplate = { valueOf: function(){return 'TimeTemplate';}, Type: 'BoTimeTemplate', Index: 76, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DateTemplate = { valueOf: function(){return 'DateTemplate';}, Type: 'BoDateTemplate', Index: 77, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DateSeparator = { valueOf: function(){return 'DateSeparator';}, Type: 'Edm.String', Index: 78, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.FCCheckAccount = { valueOf: function(){return 'FCCheckAccount';}, Type: 'BoCurrencyCheck', Index: 79, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ChangedExistingOrders = { valueOf: function(){return 'ChangedExistingOrders';}, Type: 'BoYesNoEnum', Index: 80, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.MultiCurrencyCheck = { valueOf: function(){return 'MultiCurrencyCheck';}, Type: 'BoCurrencyCheck', Index: 81, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ISRType = { valueOf: function(){return 'ISRType';}, Type: 'Edm.Int32', Index: 82, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DisplayRoundingRemark = { valueOf: function(){return 'DisplayRoundingRemark';}, Type: 'BoYesNoEnum', Index: 83, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ISRBillerID = { valueOf: function(){return 'ISRBillerID';}, Type: 'Edm.String', Index: 84, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BlockSystemCurrencyEditing = { valueOf: function(){return 'BlockSystemCurrencyEditing';}, Type: 'BoYesNoEnum', Index: 85, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BlockPostingDateEditing = { valueOf: function(){return 'BlockPostingDateEditing';}, Type: 'BoYesNoEnum', Index: 86, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DefaultWarehouse = { valueOf: function(){return 'DefaultWarehouse';}, Type: 'Edm.String', Index: 87, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BlockTaxDate = { valueOf: function(){return 'BlockTaxDate';}, Type: 'BoYesNoEnum', Index: 88, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.TaxDefinitionforVatitem = { valueOf: function(){return 'TaxDefinitionforVatitem';}, Type: 'Edm.String', Index: 89, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.TaxDefinitionforVatservice = { valueOf: function(){return 'TaxDefinitionforVatservice';}, Type: 'Edm.String', Index: 90, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.TaxGroupforPurchaseItem = { valueOf: function(){return 'TaxGroupforPurchaseItem';}, Type: 'Edm.String', Index: 91, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.TaxGroupforServicePurchase = { valueOf: function(){return 'TaxGroupforServicePurchase';}, Type: 'Edm.String', Index: 92, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CalculateBudget = { valueOf: function(){return 'CalculateBudget';}, Type: 'BoYesNoEnum', Index: 93, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CustomerIdNumber = { valueOf: function(){return 'CustomerIdNumber';}, Type: 'Edm.String', Index: 94, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BlockBudget = { valueOf: function(){return 'BlockBudget';}, Type: 'BoBlockBudget', Index: 95, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BudgetAlert = { valueOf: function(){return 'BudgetAlert';}, Type: 'BoBudgetAlert', Index: 96, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BlockPurchaseOrders = { valueOf: function(){return 'BlockPurchaseOrders';}, Type: 'BoYesNoEnum', Index: 97, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BlockBookkeeping = { valueOf: function(){return 'BlockBookkeeping';}, Type: 'BoYesNoEnum', Index: 98, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DefaultBudgetCostAssessMt = { valueOf: function(){return 'DefaultBudgetCostAssessMt';}, Type: 'Edm.Int32', Index: 99, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ContinuousStockManagement = { valueOf: function(){return 'ContinuousStockManagement';}, Type: 'BoYesNoEnum', Index: 100, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ContinuousStockSystem = { valueOf: function(){return 'ContinuousStockSystem';}, Type: 'BoInventorySystem', Index: 101, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.RoundTaxAmounts = { valueOf: function(){return 'RoundTaxAmounts';}, Type: 'BoYesNoEnum', Index: 102, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BlockDelNotesforPurchase = { valueOf: function(){return 'BlockDelNotesforPurchase';}, Type: 'BoYesNoEnum', Index: 103, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.FileNumberinIncomeTax = { valueOf: function(){return 'FileNumberinIncomeTax';}, Type: 'Edm.String', Index: 104, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DeferredTax = { valueOf: function(){return 'DeferredTax';}, Type: 'BoYesNoEnum', Index: 105, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DefaultBankNo = { valueOf: function(){return 'DefaultBankNo';}, Type: 'Edm.String', Index: 106, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DefaultBankAccount = { valueOf: function(){return 'DefaultBankAccount';}, Type: 'Edm.String', Index: 107, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DefaultBranch = { valueOf: function(){return 'DefaultBranch';}, Type: 'Edm.String', Index: 108, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.UsePASystem = { valueOf: function(){return 'UsePASystem';}, Type: 'BoYesNoEnum', Index: 109, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ServiceCode = { valueOf: function(){return 'ServiceCode';}, Type: 'Edm.String', Index: 110, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ServicePassword = { valueOf: function(){return 'ServicePassword';}, Type: 'Edm.String', Index: 111, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ParamFolderPath = { valueOf: function(){return 'ParamFolderPath';}, Type: 'Edm.String', Index: 112, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ExcelFolderPath = { valueOf: function(){return 'ExcelFolderPath';}, Type: 'Edm.String', Index: 113, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.FederalTaxID2 = { valueOf: function(){return 'FederalTaxID2';}, Type: 'Edm.String', Index: 114, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.FederalTaxID3 = { valueOf: function(){return 'FederalTaxID3';}, Type: 'Edm.String', Index: 115, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DecimalSeparator = { valueOf: function(){return 'DecimalSeparator';}, Type: 'Edm.String', Index: 116, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ThousandsSeparator = { valueOf: function(){return 'ThousandsSeparator';}, Type: 'Edm.String', Index: 117, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DisplayCurrencyontheRight = { valueOf: function(){return 'DisplayCurrencyontheRight';}, Type: 'BoYesNoEnum', Index: 118, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AlertbyWarehouse = { valueOf: function(){return 'AlertbyWarehouse';}, Type: 'BoYesNoEnum', Index: 119, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PriceSystem = { valueOf: function(){return 'PriceSystem';}, Type: 'BoYesNoEnum', Index: 120, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.WholdingTaxDedHierarchy = { valueOf: function(){return 'WholdingTaxDedHierarchy';}, Type: 'BoYesNoEnum', Index: 121, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DocConfirmation = { valueOf: function(){return 'DocConfirmation';}, Type: 'BoYesNoEnum', Index: 122, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DefaultforBatchStatus = { valueOf: function(){return 'DefaultforBatchStatus';}, Type: 'BoDefaultBatchStatus', Index: 123, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.GLMethod = { valueOf: function(){return 'GLMethod';}, Type: 'BoGLMethods', Index: 124, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.UniqueSerialNo = { valueOf: function(){return 'UniqueSerialNo';}, Type: 'BoUniqueSerialNumber', Index: 125, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.MaxHistory = { valueOf: function(){return 'MaxHistory';}, Type: 'Edm.Int32', Index: 126, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ChangeDefReconAPAccounts = { valueOf: function(){return 'ChangeDefReconAPAccounts';}, Type: 'BoYesNoEnum', Index: 127, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ChangeDefReconARAccounts = { valueOf: function(){return 'ChangeDefReconARAccounts';}, Type: 'BoYesNoEnum', Index: 128, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BPTypeCode = { valueOf: function(){return 'BPTypeCode';}, Type: 'Edm.String', Index: 129, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PBSNumber = { valueOf: function(){return 'PBSNumber';}, Type: 'Edm.String', Index: 130, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PBSGroupNumber = { valueOf: function(){return 'PBSGroupNumber';}, Type: 'Edm.String', Index: 131, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.OrganizationNumber = { valueOf: function(){return 'OrganizationNumber';}, Type: 'Edm.String', Index: 132, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AccountSegmentsSeparator = { valueOf: function(){return 'AccountSegmentsSeparator';}, Type: 'Edm.String', Index: 133, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DisplayBookkeepingWindow = { valueOf: function(){return 'DisplayBookkeepingWindow';}, Type: 'BoYesNoEnum', Index: 134, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.SHandleWT = { valueOf: function(){return 'SHandleWT';}, Type: 'BoYesNoEnum', Index: 135, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.SDefaultWTCode = { valueOf: function(){return 'SDefaultWTCode';}, Type: 'Edm.String', Index: 136, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.WithholdingTaxPHandle = { valueOf: function(){return 'WithholdingTaxPHandle';}, Type: 'Edm.String', Index: 137, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PDefaultWTCode = { valueOf: function(){return 'PDefaultWTCode';}, Type: 'Edm.String', Index: 138, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.WTLiableExpense = { valueOf: function(){return 'WTLiableExpense';}, Type: 'BoYesNoEnum', Index: 139, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.UseNegativeAmounts = { valueOf: function(){return 'UseNegativeAmounts';}, Type: 'BoYesNoEnum', Index: 140, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.HolidaysName = { valueOf: function(){return 'HolidaysName';}, Type: 'Edm.String', Index: 141, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.OrderBlock = { valueOf: function(){return 'OrderBlock';}, Type: 'Edm.String', Index: 142, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.RoundingMethod = { valueOf: function(){return 'RoundingMethod';}, Type: 'BoYesNoEnum', Index: 143, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AdressFromWH = { valueOf: function(){return 'AdressFromWH';}, Type: 'BoYesNoEnum', Index: 144, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.OrderingParty = { valueOf: function(){return 'OrderingParty';}, Type: 'Edm.String', Index: 145, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CertificateNo = { valueOf: function(){return 'CertificateNo';}, Type: 'Edm.String', Index: 146, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ExpirationDate = { valueOf: function(){return 'ExpirationDate';}, Type: 'Edm.DateTime', Index: 147, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.NationalInsuranceNo = { valueOf: function(){return 'NationalInsuranceNo';}, Type: 'Edm.String', Index: 148, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.SalesOrderConfirmed = { valueOf: function(){return 'SalesOrderConfirmed';}, Type: 'BoYesNoEnum', Index: 149, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PurchaseOrderConfirmed = { valueOf: function(){return 'PurchaseOrderConfirmed';}, Type: 'BoYesNoEnum', Index: 150, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.SDfltITWT = { valueOf: function(){return 'SDfltITWT';}, Type: 'Edm.String', Index: 151, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PDfltITWT = { valueOf: function(){return 'PDfltITWT';}, Type: 'Edm.String', Index: 152, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DefaultAccountCurrency = { valueOf: function(){return 'DefaultAccountCurrency';}, Type: 'BoYesNoEnum', Index: 153, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DeferredTaxforVendors = { valueOf: function(){return 'DeferredTaxforVendors';}, Type: 'BoYesNoEnum', Index: 154, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CreateAutoVATLineinJDT = { valueOf: function(){return 'CreateAutoVATLineinJDT';}, Type: 'BoYesNoEnum', Index: 155, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ConsumeForecast = { valueOf: function(){return 'ConsumeForecast';}, Type: 'BoYesNoEnum', Index: 156, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ConsumptionMethod = { valueOf: function(){return 'ConsumptionMethod';}, Type: 'BoConsumptionMethod', Index: 157, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DaysBackward = { valueOf: function(){return 'DaysBackward';}, Type: 'Edm.Int32', Index: 158, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DaysForward = { valueOf: function(){return 'DaysForward';}, Type: 'Edm.Int32', Index: 159, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DefaultDunningTerm = { valueOf: function(){return 'DefaultDunningTerm';}, Type: 'Edm.String', Index: 160, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DefaultBankAccountKey = { valueOf: function(){return 'DefaultBankAccountKey';}, Type: 'Edm.Int32', Index: 161, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.MultiLanguageSupportEnable = { valueOf: function(){return 'MultiLanguageSupportEnable';}, Type: 'BoYesNoEnum', Index: 162, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AllowFuturePostingDate = { valueOf: function(){return 'AllowFuturePostingDate';}, Type: 'BoYesNoEnum', Index: 163, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AdditionalIdNumber = { valueOf: function(){return 'AdditionalIdNumber';}, Type: 'Edm.String', Index: 164, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.State = { valueOf: function(){return 'State';}, Type: 'Edm.String', Index: 165, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CalculateRowDiscount = { valueOf: function(){return 'CalculateRowDiscount';}, Type: 'BoYesNoEnum', Index: 166, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BankStatementInstalled = { valueOf: function(){return 'BankStatementInstalled';}, Type: 'BoYesNoEnum', Index: 167, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.UniqueTaxPayerReference = { valueOf: function(){return 'UniqueTaxPayerReference';}, Type: 'Edm.String', Index: 168, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.EmployerReference = { valueOf: function(){return 'EmployerReference';}, Type: 'Edm.String', Index: 169, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PeriodStatusAutoChange = { valueOf: function(){return 'PeriodStatusAutoChange';}, Type: 'BoYesNoEnum', Index: 170, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PeriodStatusChangeDelay = { valueOf: function(){return 'PeriodStatusChangeDelay';}, Type: 'Edm.Int32', Index: 171, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.GrossProfitPercentForServiceDocuments = { valueOf: function(){return 'GrossProfitPercentForServiceDocuments';}, Type: 'Edm.Double', Index: 172, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.XMLFileFolderPath = { valueOf: function(){return 'XMLFileFolderPath';}, Type: 'Edm.String', Index: 173, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PickList = { valueOf: function(){return 'PickList';}, Type: 'BoYesNoEnum', Index: 174, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.GeneralManager = { valueOf: function(){return 'GeneralManager';}, Type: 'Edm.String', Index: 175, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.GeneralManagerForeignLanguage = { valueOf: function(){return 'GeneralManagerForeignLanguage';}, Type: 'Edm.String', Index: 176, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.UseProductionProfitAndLossAccount = { valueOf: function(){return 'UseProductionProfitAndLossAccount';}, Type: 'BoYesNoEnum', Index: 177, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.WTAccumAmountAP = { valueOf: function(){return 'WTAccumAmountAP';}, Type: 'Edm.Double', Index: 178, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.WTAccumAmountAR = { valueOf: function(){return 'WTAccumAmountAR';}, Type: 'Edm.Double', Index: 179, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CopyExchangeRateInCopyTo = { valueOf: function(){return 'CopyExchangeRateInCopyTo';}, Type: 'BoYesNoEnum', Index: 180, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.GTSOutboundFolder = { valueOf: function(){return 'GTSOutboundFolder';}, Type: 'Edm.String', Index: 181, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.GTSInboundFolder = { valueOf: function(){return 'GTSInboundFolder';}, Type: 'Edm.String', Index: 182, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.GTSSeparateCode = { valueOf: function(){return 'GTSSeparateCode';}, Type: 'Edm.String', Index: 183, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.GTSDefaultChecker = { valueOf: function(){return 'GTSDefaultChecker';}, Type: 'Edm.Int32', Index: 184, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.GTSDefaultPayee = { valueOf: function(){return 'GTSDefaultPayee';}, Type: 'Edm.Int32', Index: 185, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.GTSMaxAmount = { valueOf: function(){return 'GTSMaxAmount';}, Type: 'Edm.Double', Index: 186, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.GTSResponseToExceeding = { valueOf: function(){return 'GTSResponseToExceeding';}, Type: 'GTSResponseToExceedingEnum', Index: 187, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ApplicationOfIFRS = { valueOf: function(){return 'ApplicationOfIFRS';}, Type: 'BoYesNoEnum', Index: 188, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.StartingInFiscalYear = { valueOf: function(){return 'StartingInFiscalYear';}, Type: 'Edm.Int32', Index: 189, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ReportAccordingTo = { valueOf: function(){return 'ReportAccordingTo';}, Type: 'Edm.Int32', Index: 190, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CopyOpenRowsToDelivery = { valueOf: function(){return 'CopyOpenRowsToDelivery';}, Type: 'BoYesNoEnum', Index: 191, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.EnableApprovalProcedureInDI = { valueOf: function(){return 'EnableApprovalProcedureInDI';}, Type: 'BoYesNoEnum', Index: 192, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.EnableUpdateDocAfterApproval = { valueOf: function(){return 'EnableUpdateDocAfterApproval';}, Type: 'BoYesNoEnum', Index: 193, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.EnableUpdateDraftDuringApproval = { valueOf: function(){return 'EnableUpdateDraftDuringApproval';}, Type: 'BoYesNoEnum', Index: 194, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.IssuePrimarilyBy = { valueOf: function(){return 'IssuePrimarilyBy';}, Type: 'IssuePrimarilyByEnum', Index: 195, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.IsRemoveUnpricedValue = { valueOf: function(){return 'IsRemoveUnpricedValue';}, Type: 'BoYesNoEnum', Index: 196, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.EnableAdvancedGLAccountDetermination = { valueOf: function(){return 'EnableAdvancedGLAccountDetermination';}, Type: 'BoYesNoEnum', Index: 197, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CreateOnlineQuotation = { valueOf: function(){return 'CreateOnlineQuotation';}, Type: 'BoYesNoEnum', Index: 198, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.IsPrinterConnected = { valueOf: function(){return 'IsPrinterConnected';}, Type: 'BoYesNoEnum', Index: 199, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.EnableBranches = { valueOf: function(){return 'EnableBranches';}, Type: 'BoYesNoEnum', Index: 200, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.IEMandatoryValidation = { valueOf: function(){return 'IEMandatoryValidation';}, Type: 'BoYesNoEnum', Index: 201, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.EnablePaymentDueDates = { valueOf: function(){return 'EnablePaymentDueDates';}, Type: 'BoYesNoEnum', Index: 202, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.MaximumNumberOfDaysForDueDate = { valueOf: function(){return 'MaximumNumberOfDaysForDueDate';}, Type: 'Edm.Int32', Index: 203, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AliasName = { valueOf: function(){return 'AliasName';}, Type: 'Edm.String', Index: 204, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.EnableCentralizedIncomingPayments = { valueOf: function(){return 'EnableCentralizedIncomingPayments';}, Type: 'BoYesNoEnum', Index: 205, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.EnableCentralizedOutgoingPayments = { valueOf: function(){return 'EnableCentralizedOutgoingPayments';}, Type: 'BoYesNoEnum', Index: 206, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.TaxRateDetermination = { valueOf: function(){return 'TaxRateDetermination';}, Type: 'TaxRateDeterminationEnum', Index: 207, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BoletoFolderPath = { valueOf: function(){return 'BoletoFolderPath';}, Type: 'Edm.String', Index: 208, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AllowMultipleBAOnSamePeriod = { valueOf: function(){return 'AllowMultipleBAOnSamePeriod';}, Type: 'BoYesNoEnum', Index: 209, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BlockMultipleBAOnSameAPDocument = { valueOf: function(){return 'BlockMultipleBAOnSameAPDocument';}, Type: 'BoYesNoEnum', Index: 210, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BlockMultipleBAOnSameARDocument = { valueOf: function(){return 'BlockMultipleBAOnSameARDocument';}, Type: 'BoYesNoEnum', Index: 211, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DisplayCancelDocInReport = { valueOf: function(){return 'DisplayCancelDocInReport';}, Type: 'BoYesNoEnum', Index: 212, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.MaxDaysForCancel = { valueOf: function(){return 'MaxDaysForCancel';}, Type: 'Edm.Int32', Index: 213, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ReuseDocumentNum = { valueOf: function(){return 'ReuseDocumentNum';}, Type: 'BoYesNoEnum', Index: 214, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ReuseNotaFiscalNum = { valueOf: function(){return 'ReuseNotaFiscalNum';}, Type: 'BoYesNoEnum', Index: 215, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AutoAddUoM = { valueOf: function(){return 'AutoAddUoM';}, Type: 'BoYesNoEnum', Index: 216, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AutoAddPackage = { valueOf: function(){return 'AutoAddPackage';}, Type: 'BoYesNoEnum', Index: 217, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DisplayInactivePriceListInReports = { valueOf: function(){return 'DisplayInactivePriceListInReports';}, Type: 'BoYesNoEnum', Index: 218, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DisplayInactivePriceListInDocuments = { valueOf: function(){return 'DisplayInactivePriceListInDocuments';}, Type: 'BoYesNoEnum', Index: 219, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DisplayInactivePriceListInSettings = { valueOf: function(){return 'DisplayInactivePriceListInSettings';}, Type: 'BoYesNoEnum', Index: 220, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ApplyBaseInactiveStatusToSpecialPrices = { valueOf: function(){return 'ApplyBaseInactiveStatusToSpecialPrices';}, Type: 'BoYesNoEnum', Index: 221, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ApplyBaseInactiveStatusToPeriodVolumeDiscounts = { valueOf: function(){return 'ApplyBaseInactiveStatusToPeriodVolumeDiscounts';}, Type: 'BoYesNoEnum', Index: 222, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ApplyBaseInactiveStatusToPriceLists = { valueOf: function(){return 'ApplyBaseInactiveStatusToPriceLists';}, Type: 'BoYesNoEnum', Index: 223, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.PriceProceedMethod = { valueOf: function(){return 'PriceProceedMethod';}, Type: 'PriceProceedMethodEnum', Index: 224, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.RemoveUpdatePricesBasedOnNonStandardPriceLists = { valueOf: function(){return 'RemoveUpdatePricesBasedOnNonStandardPriceLists';}, Type: 'BoYesNoEnum', Index: 225, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.SirenNo = { valueOf: function(){return 'SirenNo';}, Type: 'Edm.String', Index: 226, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.InstitutionCode = { valueOf: function(){return 'InstitutionCode';}, Type: 'Edm.String', Index: 227, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.SetResourcesWarehouses = { valueOf: function(){return 'SetResourcesWarehouses';}, Type: 'BoYesNoEnum', Index: 228, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.BlockStockNegativeQuantity = { valueOf: function(){return 'BlockStockNegativeQuantity';}, Type: 'BoYesNoEnum', Index: 229, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.UseParentWIPInComponents = { valueOf: function(){return 'UseParentWIPInComponents';}, Type: 'BoYesNoEnum', Index: 230, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.EnableUpdateBAPriceAndPlannedAmount = { valueOf: function(){return 'EnableUpdateBAPriceAndPlannedAmount';}, Type: 'BoYesNoEnum', Index: 231, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AutoAssignOnlyValidAPBA = { valueOf: function(){return 'AutoAssignOnlyValidAPBA';}, Type: 'BoYesNoEnum', Index: 232, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AutoAssignOnlyValidARBA = { valueOf: function(){return 'AutoAssignOnlyValidARBA';}, Type: 'BoYesNoEnum', Index: 233, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ActionWhenDeviateFromBAForPO = { valueOf: function(){return 'ActionWhenDeviateFromBAForPO';}, Type: 'BADivationAlertLevelEnum', Index: 234, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ActionWhenDeviateFromBAForGRPO = { valueOf: function(){return 'ActionWhenDeviateFromBAForGRPO';}, Type: 'BADivationAlertLevelEnum', Index: 235, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ActionWhenDeviateFromBAForAccounting = { valueOf: function(){return 'ActionWhenDeviateFromBAForAccounting';}, Type: 'BADivationAlertLevelEnum', Index: 236, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.Series = { valueOf: function(){return 'Series';}, Type: 'Edm.Int32', Index: 237, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.Account = { valueOf: function(){return 'Account';}, Type: 'Edm.String', Index: 238, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.EnableMultipleSchedulings = { valueOf: function(){return 'EnableMultipleSchedulings';}, Type: 'Edm.String', Index: 239, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DisplayBatchQtyUoMBy = { valueOf: function(){return 'DisplayBatchQtyUoMBy';}, Type: 'DisplayBatchQtyUoMByEnum', Index: 240, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AllowInBoundPostingWithZeroPrice = { valueOf: function(){return 'AllowInBoundPostingWithZeroPrice';}, Type: 'BoYesNoEnum', Index: 241, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.InventoryPostingHighlightVariance = { valueOf: function(){return 'InventoryPostingHighlightVariance';}, Type: 'Edm.Double', Index: 242, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.InventoryPostingReleaseOnlySerialAndBatch = { valueOf: function(){return 'InventoryPostingReleaseOnlySerialAndBatch';}, Type: 'BoYesNoEnum', Index: 243, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.InventoryCountingHighlightVariance = { valueOf: function(){return 'InventoryCountingHighlightVariance';}, Type: 'Edm.Double', Index: 244, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.InventoryCountingHighlightMaxVariance = { valueOf: function(){return 'InventoryCountingHighlightMaxVariance';}, Type: 'Edm.Double', Index: 245, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.InventoryCountingHighlightCountersDifference = { valueOf: function(){return 'InventoryCountingHighlightCountersDifference';}, Type: 'Edm.Double', Index: 246, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CopySingleCounterToIndividualCounter = { valueOf: function(){return 'CopySingleCounterToIndividualCounter';}, Type: 'BoYesNoEnum', Index: 247, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CloseCountedRowsWithZeroDifference = { valueOf: function(){return 'CloseCountedRowsWithZeroDifference';}, Type: 'BoYesNoEnum', Index: 248, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CloseCountedRowsWithoutConfirmation = { valueOf: function(){return 'CloseCountedRowsWithoutConfirmation';}, Type: 'BoYesNoEnum', Index: 249, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.CalculateInWhseQtyBasedOnPostingDate = { valueOf: function(){return 'CalculateInWhseQtyBasedOnPostingDate';}, Type: 'BoYesNoEnum', Index: 250, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.RefreshInWhseQtyInDI = { valueOf: function(){return 'RefreshInWhseQtyInDI';}, Type: 'BoYesNoEnum', Index: 251, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.SEPACreditorID = { valueOf: function(){return 'SEPACreditorID';}, Type: 'Edm.String', Index: 252, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.DataOwnershipManageBy = { valueOf: function(){return 'DataOwnershipManageBy';}, Type: 'BoDataOwnershipManageMethodEnum', Index: 253, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.AllowBPWithNoOwner = { valueOf: function(){return 'AllowBPWithNoOwner';}, Type: 'BoYesNoEnum', Index: 254, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.EnableSeparatePriceMode = { valueOf: function(){return 'EnableSeparatePriceMode';}, Type: 'BoYesNoEnum', Index: 255, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.AdminInfo.ExtendedAdminInfo = { valueOf: function(){return 'ExtendedAdminInfo';}, Type: 'ExtendedAdminInfo', Index: 256, Nullable: true, IsArray: false, IsComplex: true };
SAPB1.AdminInfo.prototype.Code = new Number();
SAPB1.AdminInfo.prototype.CompanyName = new String();
SAPB1.AdminInfo.prototype.Address = new String();
SAPB1.AdminInfo.prototype.Country = new String();
SAPB1.AdminInfo.prototype.PrintingHeader = new String();
SAPB1.AdminInfo.prototype.PhoneNumber1 = new String();
SAPB1.AdminInfo.prototype.PhoneNumber2 = new String();
SAPB1.AdminInfo.prototype.FaxNumber = new String();
SAPB1.AdminInfo.prototype.eMail = new String();
SAPB1.AdminInfo.prototype.ManagingDirector = new String();
SAPB1.AdminInfo.prototype.ChartofAccountsTemplate = new String();
SAPB1.AdminInfo.prototype.LocalCurrency = new String();
SAPB1.AdminInfo.prototype.SystemCurrency = new String();
SAPB1.AdminInfo.prototype.CreditBalancewithMinusSign = new String();
SAPB1.AdminInfo.prototype.StandardUnitofLength = new Number();
SAPB1.AdminInfo.prototype.WeightUnitDefault = new Number();
SAPB1.AdminInfo.prototype.DirectIndirectRate = new String();
SAPB1.AdminInfo.prototype.MinimumAmountfor347Report = new Number();
SAPB1.AdminInfo.prototype.SetItemsWarehouses = new String();
SAPB1.AdminInfo.prototype.BankCountry = new String();
SAPB1.AdminInfo.prototype.FederalTaxID = new String();
SAPB1.AdminInfo.prototype.TaxOffice = new String();
SAPB1.AdminInfo.prototype.DeductionFileNo = new String();
SAPB1.AdminInfo.prototype.TaxCollection = new String();
SAPB1.AdminInfo.prototype.TaxDefinition = new String();
SAPB1.AdminInfo.prototype.TaxPercentage = new Number();
SAPB1.AdminInfo.prototype.AdvancesonCorpIncomeTax = new Number();
SAPB1.AdminInfo.prototype.WithTax = new Number();
SAPB1.AdminInfo.prototype.WithholdingTaxVendorDdct = new String();
SAPB1.AdminInfo.prototype.CustomersDeductionatSource = new String();
SAPB1.AdminInfo.prototype.WithholdingTaxTdctPercnt = new Number();
SAPB1.AdminInfo.prototype.WithholdingTaxDdctExpired = new String();
SAPB1.AdminInfo.prototype.WithholdingTaxDdctOffice = new String();
SAPB1.AdminInfo.prototype.CommitmentRestriction = new String();
SAPB1.AdminInfo.prototype.CreditRestriction = new String();
SAPB1.AdminInfo.prototype.RestrictSales = new String();
SAPB1.AdminInfo.prototype.RestrictDelNotesPO = new String();
SAPB1.AdminInfo.prototype.RestrictOrders = new String();
SAPB1.AdminInfo.prototype.ConsiderDelNotesinSalesR = new String();
SAPB1.AdminInfo.prototype.CreditDepositType = new String();
SAPB1.AdminInfo.prototype.UseTax = new String();
SAPB1.AdminInfo.prototype.SplitPO = new String();
SAPB1.AdminInfo.prototype.AltNameForApInvoice = new String();
SAPB1.AdminInfo.prototype.AltNameforCreditMemo = new String();
SAPB1.AdminInfo.prototype.AltNameForGoodsReceipt = new String();
SAPB1.AdminInfo.prototype.AltNameForGoodsReturn = new String();
SAPB1.AdminInfo.prototype.AltNameForPurchase = new String();
SAPB1.AdminInfo.prototype.AlertTypeforWHStock = new String();
SAPB1.AdminInfo.prototype.SetCommissionbyCustomer = new String();
SAPB1.AdminInfo.prototype.SetCommissionbyItem = new String();
SAPB1.AdminInfo.prototype.SetCommissionbySE = new String();
SAPB1.AdminInfo.prototype.DefaultCustomerPaymentTerms = new Number();
SAPB1.AdminInfo.prototype.DefaultVendorPaymentTerms = new Number();
SAPB1.AdminInfo.prototype.CalculateGrossProfitperTra = new String();
SAPB1.AdminInfo.prototype.PriceListforCostPrice = new Number();
SAPB1.AdminInfo.prototype.GrossProfitAfterSale = new String();
SAPB1.AdminInfo.prototype.DisplayPriceforPriceOnly = new String();
SAPB1.AdminInfo.prototype.CalculateTaxinSalesQuotati = new String();
SAPB1.AdminInfo.prototype.BaseField = new String();
SAPB1.AdminInfo.prototype.AllowClosedSalesQuotations = new String();
SAPB1.AdminInfo.prototype.UserConversionCode = new String();
SAPB1.AdminInfo.prototype.CompanyColor = new Number();
SAPB1.AdminInfo.prototype.TotalsAccuracy = new Number();
SAPB1.AdminInfo.prototype.AccuracyofQuantities = new Number();
SAPB1.AdminInfo.prototype.PriceAccuracy = new Number();
SAPB1.AdminInfo.prototype.RateAccuracy = new Number();
SAPB1.AdminInfo.prototype.PercentageAccuracy = new Number();
SAPB1.AdminInfo.prototype.MeasuringAccuracy = new Number();
SAPB1.AdminInfo.prototype.QueryAccuracy = new Number();
SAPB1.AdminInfo.prototype.AddressinForeignLanguage = new String();
SAPB1.AdminInfo.prototype.DefaultTaxCode = new String();
SAPB1.AdminInfo.prototype.LetterHeaderinForeignLangu = new String();
SAPB1.AdminInfo.prototype.PhoneNumber1ForeignLang = new String();
SAPB1.AdminInfo.prototype.PhoneNumber2ForeignLang = new String();
SAPB1.AdminInfo.prototype.FaxNumberForeignLang = new String();
SAPB1.AdminInfo.prototype.ManagingDirectorForeignLan = new String();
SAPB1.AdminInfo.prototype.TimeTemplate = new String();
SAPB1.AdminInfo.prototype.DateTemplate = new String();
SAPB1.AdminInfo.prototype.DateSeparator = new String();
SAPB1.AdminInfo.prototype.FCCheckAccount = new String();
SAPB1.AdminInfo.prototype.ChangedExistingOrders = new String();
SAPB1.AdminInfo.prototype.MultiCurrencyCheck = new String();
SAPB1.AdminInfo.prototype.ISRType = new Number();
SAPB1.AdminInfo.prototype.DisplayRoundingRemark = new String();
SAPB1.AdminInfo.prototype.ISRBillerID = new String();
SAPB1.AdminInfo.prototype.BlockSystemCurrencyEditing = new String();
SAPB1.AdminInfo.prototype.BlockPostingDateEditing = new String();
SAPB1.AdminInfo.prototype.DefaultWarehouse = new String();
SAPB1.AdminInfo.prototype.BlockTaxDate = new String();
SAPB1.AdminInfo.prototype.TaxDefinitionforVatitem = new String();
SAPB1.AdminInfo.prototype.TaxDefinitionforVatservice = new String();
SAPB1.AdminInfo.prototype.TaxGroupforPurchaseItem = new String();
SAPB1.AdminInfo.prototype.TaxGroupforServicePurchase = new String();
SAPB1.AdminInfo.prototype.CalculateBudget = new String();
SAPB1.AdminInfo.prototype.CustomerIdNumber = new String();
SAPB1.AdminInfo.prototype.BlockBudget = new String();
SAPB1.AdminInfo.prototype.BudgetAlert = new String();
SAPB1.AdminInfo.prototype.BlockPurchaseOrders = new String();
SAPB1.AdminInfo.prototype.BlockBookkeeping = new String();
SAPB1.AdminInfo.prototype.DefaultBudgetCostAssessMt = new Number();
SAPB1.AdminInfo.prototype.ContinuousStockManagement = new String();
SAPB1.AdminInfo.prototype.ContinuousStockSystem = new String();
SAPB1.AdminInfo.prototype.RoundTaxAmounts = new String();
SAPB1.AdminInfo.prototype.BlockDelNotesforPurchase = new String();
SAPB1.AdminInfo.prototype.FileNumberinIncomeTax = new String();
SAPB1.AdminInfo.prototype.DeferredTax = new String();
SAPB1.AdminInfo.prototype.DefaultBankNo = new String();
SAPB1.AdminInfo.prototype.DefaultBankAccount = new String();
SAPB1.AdminInfo.prototype.DefaultBranch = new String();
SAPB1.AdminInfo.prototype.UsePASystem = new String();
SAPB1.AdminInfo.prototype.ServiceCode = new String();
SAPB1.AdminInfo.prototype.ServicePassword = new String();
SAPB1.AdminInfo.prototype.ParamFolderPath = new String();
SAPB1.AdminInfo.prototype.ExcelFolderPath = new String();
SAPB1.AdminInfo.prototype.FederalTaxID2 = new String();
SAPB1.AdminInfo.prototype.FederalTaxID3 = new String();
SAPB1.AdminInfo.prototype.DecimalSeparator = new String();
SAPB1.AdminInfo.prototype.ThousandsSeparator = new String();
SAPB1.AdminInfo.prototype.DisplayCurrencyontheRight = new String();
SAPB1.AdminInfo.prototype.AlertbyWarehouse = new String();
SAPB1.AdminInfo.prototype.PriceSystem = new String();
SAPB1.AdminInfo.prototype.WholdingTaxDedHierarchy = new String();
SAPB1.AdminInfo.prototype.DocConfirmation = new String();
SAPB1.AdminInfo.prototype.DefaultforBatchStatus = new String();
SAPB1.AdminInfo.prototype.GLMethod = new String();
SAPB1.AdminInfo.prototype.UniqueSerialNo = new String();
SAPB1.AdminInfo.prototype.MaxHistory = new Number();
SAPB1.AdminInfo.prototype.ChangeDefReconAPAccounts = new String();
SAPB1.AdminInfo.prototype.ChangeDefReconARAccounts = new String();
SAPB1.AdminInfo.prototype.BPTypeCode = new String();
SAPB1.AdminInfo.prototype.PBSNumber = new String();
SAPB1.AdminInfo.prototype.PBSGroupNumber = new String();
SAPB1.AdminInfo.prototype.OrganizationNumber = new String();
SAPB1.AdminInfo.prototype.AccountSegmentsSeparator = new String();
SAPB1.AdminInfo.prototype.DisplayBookkeepingWindow = new String();
SAPB1.AdminInfo.prototype.SHandleWT = new String();
SAPB1.AdminInfo.prototype.SDefaultWTCode = new String();
SAPB1.AdminInfo.prototype.WithholdingTaxPHandle = new String();
SAPB1.AdminInfo.prototype.PDefaultWTCode = new String();
SAPB1.AdminInfo.prototype.WTLiableExpense = new String();
SAPB1.AdminInfo.prototype.UseNegativeAmounts = new String();
SAPB1.AdminInfo.prototype.HolidaysName = new String();
SAPB1.AdminInfo.prototype.OrderBlock = new String();
SAPB1.AdminInfo.prototype.RoundingMethod = new String();
SAPB1.AdminInfo.prototype.AdressFromWH = new String();
SAPB1.AdminInfo.prototype.OrderingParty = new String();
SAPB1.AdminInfo.prototype.CertificateNo = new String();
SAPB1.AdminInfo.prototype.ExpirationDate = new String();
SAPB1.AdminInfo.prototype.NationalInsuranceNo = new String();
SAPB1.AdminInfo.prototype.SalesOrderConfirmed = new String();
SAPB1.AdminInfo.prototype.PurchaseOrderConfirmed = new String();
SAPB1.AdminInfo.prototype.SDfltITWT = new String();
SAPB1.AdminInfo.prototype.PDfltITWT = new String();
SAPB1.AdminInfo.prototype.DefaultAccountCurrency = new String();
SAPB1.AdminInfo.prototype.DeferredTaxforVendors = new String();
SAPB1.AdminInfo.prototype.CreateAutoVATLineinJDT = new String();
SAPB1.AdminInfo.prototype.ConsumeForecast = new String();
SAPB1.AdminInfo.prototype.ConsumptionMethod = new String();
SAPB1.AdminInfo.prototype.DaysBackward = new Number();
SAPB1.AdminInfo.prototype.DaysForward = new Number();
SAPB1.AdminInfo.prototype.DefaultDunningTerm = new String();
SAPB1.AdminInfo.prototype.DefaultBankAccountKey = new Number();
SAPB1.AdminInfo.prototype.MultiLanguageSupportEnable = new String();
SAPB1.AdminInfo.prototype.AllowFuturePostingDate = new String();
SAPB1.AdminInfo.prototype.AdditionalIdNumber = new String();
SAPB1.AdminInfo.prototype.State = new String();
SAPB1.AdminInfo.prototype.CalculateRowDiscount = new String();
SAPB1.AdminInfo.prototype.BankStatementInstalled = new String();
SAPB1.AdminInfo.prototype.UniqueTaxPayerReference = new String();
SAPB1.AdminInfo.prototype.EmployerReference = new String();
SAPB1.AdminInfo.prototype.PeriodStatusAutoChange = new String();
SAPB1.AdminInfo.prototype.PeriodStatusChangeDelay = new Number();
SAPB1.AdminInfo.prototype.GrossProfitPercentForServiceDocuments = new Number();
SAPB1.AdminInfo.prototype.XMLFileFolderPath = new String();
SAPB1.AdminInfo.prototype.PickList = new String();
SAPB1.AdminInfo.prototype.GeneralManager = new String();
SAPB1.AdminInfo.prototype.GeneralManagerForeignLanguage = new String();
SAPB1.AdminInfo.prototype.UseProductionProfitAndLossAccount = new String();
SAPB1.AdminInfo.prototype.WTAccumAmountAP = new Number();
SAPB1.AdminInfo.prototype.WTAccumAmountAR = new Number();
SAPB1.AdminInfo.prototype.CopyExchangeRateInCopyTo = new String();
SAPB1.AdminInfo.prototype.GTSOutboundFolder = new String();
SAPB1.AdminInfo.prototype.GTSInboundFolder = new String();
SAPB1.AdminInfo.prototype.GTSSeparateCode = new String();
SAPB1.AdminInfo.prototype.GTSDefaultChecker = new Number();
SAPB1.AdminInfo.prototype.GTSDefaultPayee = new Number();
SAPB1.AdminInfo.prototype.GTSMaxAmount = new Number();
SAPB1.AdminInfo.prototype.GTSResponseToExceeding = new String();
SAPB1.AdminInfo.prototype.ApplicationOfIFRS = new String();
SAPB1.AdminInfo.prototype.StartingInFiscalYear = new Number();
SAPB1.AdminInfo.prototype.ReportAccordingTo = new Number();
SAPB1.AdminInfo.prototype.CopyOpenRowsToDelivery = new String();
SAPB1.AdminInfo.prototype.EnableApprovalProcedureInDI = new String();
SAPB1.AdminInfo.prototype.EnableUpdateDocAfterApproval = new String();
SAPB1.AdminInfo.prototype.EnableUpdateDraftDuringApproval = new String();
SAPB1.AdminInfo.prototype.IssuePrimarilyBy = new String();
SAPB1.AdminInfo.prototype.IsRemoveUnpricedValue = new String();
SAPB1.AdminInfo.prototype.EnableAdvancedGLAccountDetermination = new String();
SAPB1.AdminInfo.prototype.CreateOnlineQuotation = new String();
SAPB1.AdminInfo.prototype.IsPrinterConnected = new String();
SAPB1.AdminInfo.prototype.EnableBranches = new String();
SAPB1.AdminInfo.prototype.IEMandatoryValidation = new String();
SAPB1.AdminInfo.prototype.EnablePaymentDueDates = new String();
SAPB1.AdminInfo.prototype.MaximumNumberOfDaysForDueDate = new Number();
SAPB1.AdminInfo.prototype.AliasName = new String();
SAPB1.AdminInfo.prototype.EnableCentralizedIncomingPayments = new String();
SAPB1.AdminInfo.prototype.EnableCentralizedOutgoingPayments = new String();
SAPB1.AdminInfo.prototype.TaxRateDetermination = new String();
SAPB1.AdminInfo.prototype.BoletoFolderPath = new String();
SAPB1.AdminInfo.prototype.AllowMultipleBAOnSamePeriod = new String();
SAPB1.AdminInfo.prototype.BlockMultipleBAOnSameAPDocument = new String();
SAPB1.AdminInfo.prototype.BlockMultipleBAOnSameARDocument = new String();
SAPB1.AdminInfo.prototype.DisplayCancelDocInReport = new String();
SAPB1.AdminInfo.prototype.MaxDaysForCancel = new Number();
SAPB1.AdminInfo.prototype.ReuseDocumentNum = new String();
SAPB1.AdminInfo.prototype.ReuseNotaFiscalNum = new String();
SAPB1.AdminInfo.prototype.AutoAddUoM = new String();
SAPB1.AdminInfo.prototype.AutoAddPackage = new String();
SAPB1.AdminInfo.prototype.DisplayInactivePriceListInReports = new String();
SAPB1.AdminInfo.prototype.DisplayInactivePriceListInDocuments = new String();
SAPB1.AdminInfo.prototype.DisplayInactivePriceListInSettings = new String();
SAPB1.AdminInfo.prototype.ApplyBaseInactiveStatusToSpecialPrices = new String();
SAPB1.AdminInfo.prototype.ApplyBaseInactiveStatusToPeriodVolumeDiscounts = new String();
SAPB1.AdminInfo.prototype.ApplyBaseInactiveStatusToPriceLists = new String();
SAPB1.AdminInfo.prototype.PriceProceedMethod = new String();
SAPB1.AdminInfo.prototype.RemoveUpdatePricesBasedOnNonStandardPriceLists = new String();
SAPB1.AdminInfo.prototype.SirenNo = new String();
SAPB1.AdminInfo.prototype.InstitutionCode = new String();
SAPB1.AdminInfo.prototype.SetResourcesWarehouses = new String();
SAPB1.AdminInfo.prototype.BlockStockNegativeQuantity = new String();
SAPB1.AdminInfo.prototype.UseParentWIPInComponents = new String();
SAPB1.AdminInfo.prototype.EnableUpdateBAPriceAndPlannedAmount = new String();
SAPB1.AdminInfo.prototype.AutoAssignOnlyValidAPBA = new String();
SAPB1.AdminInfo.prototype.AutoAssignOnlyValidARBA = new String();
SAPB1.AdminInfo.prototype.ActionWhenDeviateFromBAForPO = new String();
SAPB1.AdminInfo.prototype.ActionWhenDeviateFromBAForGRPO = new String();
SAPB1.AdminInfo.prototype.ActionWhenDeviateFromBAForAccounting = new String();
SAPB1.AdminInfo.prototype.Series = new Number();
SAPB1.AdminInfo.prototype.Account = new String();
SAPB1.AdminInfo.prototype.EnableMultipleSchedulings = new String();
SAPB1.AdminInfo.prototype.DisplayBatchQtyUoMBy = new String();
SAPB1.AdminInfo.prototype.AllowInBoundPostingWithZeroPrice = new String();
SAPB1.AdminInfo.prototype.InventoryPostingHighlightVariance = new Number();
SAPB1.AdminInfo.prototype.InventoryPostingReleaseOnlySerialAndBatch = new String();
SAPB1.AdminInfo.prototype.InventoryCountingHighlightVariance = new Number();
SAPB1.AdminInfo.prototype.InventoryCountingHighlightMaxVariance = new Number();
SAPB1.AdminInfo.prototype.InventoryCountingHighlightCountersDifference = new Number();
SAPB1.AdminInfo.prototype.CopySingleCounterToIndividualCounter = new String();
SAPB1.AdminInfo.prototype.CloseCountedRowsWithZeroDifference = new String();
SAPB1.AdminInfo.prototype.CloseCountedRowsWithoutConfirmation = new String();
SAPB1.AdminInfo.prototype.CalculateInWhseQtyBasedOnPostingDate = new String();
SAPB1.AdminInfo.prototype.RefreshInWhseQtyInDI = new String();
SAPB1.AdminInfo.prototype.SEPACreditorID = new String();
SAPB1.AdminInfo.prototype.DataOwnershipManageBy = new String();
SAPB1.AdminInfo.prototype.AllowBPWithNoOwner = new String();
SAPB1.AdminInfo.prototype.EnableSeparatePriceMode = new String();
SAPB1.AdminInfo.prototype.ExtendedAdminInfo = new ExtendedAdminInfo();

SAPB1.AdminInfo.ExtendedAdminInfo = ExtendedAdminInfo

SAPB1.AdminInfo.BoYesNoEnum = BoYesNoEnum
SAPB1.AdminInfo.BoAlertTypeforWHStockEnum = BoAlertTypeforWHStockEnum
SAPB1.AdminInfo.BoTimeTemplate = BoTimeTemplate
SAPB1.AdminInfo.BoDateTemplate = BoDateTemplate
SAPB1.AdminInfo.BoCurrencyCheck = BoCurrencyCheck
SAPB1.AdminInfo.BoBlockBudget = BoBlockBudget
SAPB1.AdminInfo.BoBudgetAlert = BoBudgetAlert
SAPB1.AdminInfo.BoInventorySystem = BoInventorySystem
SAPB1.AdminInfo.BoDefaultBatchStatus = BoDefaultBatchStatus
SAPB1.AdminInfo.BoGLMethods = BoGLMethods
SAPB1.AdminInfo.BoUniqueSerialNumber = BoUniqueSerialNumber
SAPB1.AdminInfo.BoConsumptionMethod = BoConsumptionMethod
SAPB1.AdminInfo.GTSResponseToExceedingEnum = GTSResponseToExceedingEnum
SAPB1.AdminInfo.IssuePrimarilyByEnum = IssuePrimarilyByEnum
SAPB1.AdminInfo.TaxRateDeterminationEnum = TaxRateDeterminationEnum
SAPB1.AdminInfo.PriceProceedMethodEnum = PriceProceedMethodEnum
SAPB1.AdminInfo.BADivationAlertLevelEnum = BADivationAlertLevelEnum
SAPB1.AdminInfo.DisplayBatchQtyUoMByEnum = DisplayBatchQtyUoMByEnum
SAPB1.AdminInfo.BoDataOwnershipManageMethodEnum = BoDataOwnershipManageMethodEnum

SAPB1.AdminInfo.create = function (rawObject) {
    var instance = new SAPB1.AdminInfo();
    for (var prop in rawObject) {
        if (rawObject.hasOwnProperty(prop)) {
            if (SAPB1.AdminInfo.prototype.hasOwnProperty(prop)) {
                if (instance[prop] instanceof SAPB1.Collection) {
                    var collectionInstance = instance[prop].constructor.create(rawObject[prop]);
                    instance[prop] = collectionInstance;
                } else if (instance[prop] instanceof SAPB1.ComplexType) {
                    var complexInstance = instance[prop].constructor.create(rawObject[prop]);
                    instance[prop] = complexInstance;
                }
                else {
                    instance[prop] = rawObject[prop];
                }
            }
        }
    }
    return instance;
}


module.exports = SAPB1.AdminInfo;
