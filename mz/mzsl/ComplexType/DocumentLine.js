var LineTaxJurisdiction = require('ComplexType/LineTaxJurisdiction')
var LineTaxJurisdictionCollection = require('ComplexType/LineTaxJurisdictionCollection')
var GeneratedAsset = require('ComplexType/GeneratedAsset')
var GeneratedAssetCollection = require('ComplexType/GeneratedAssetCollection')
var DocumentLineAdditionalExpense = require('ComplexType/DocumentLineAdditionalExpense')
var DocumentLineAdditionalExpenseCollection = require('ComplexType/DocumentLineAdditionalExpenseCollection')
var WithholdingTaxLine = require('ComplexType/WithholdingTaxLine')
var WithholdingTaxLineCollection = require('ComplexType/WithholdingTaxLineCollection')
var SerialNumber = require('ComplexType/SerialNumber')
var SerialNumberCollection = require('ComplexType/SerialNumberCollection')
var BatchNumber = require('ComplexType/BatchNumber')
var BatchNumberCollection = require('ComplexType/BatchNumberCollection')
var DocumentLinesBinAllocation = require('ComplexType/DocumentLinesBinAllocation')
var DocumentLinesBinAllocationCollection = require('ComplexType/DocumentLinesBinAllocationCollection')

var BoItemTreeTypes = require('EnumType/BoItemTreeTypes')
var BoYesNoEnum = require('EnumType/BoYesNoEnum')
var BoTaxTypes = require('EnumType/BoTaxTypes')
var BoCorInvItemStatus = require('EnumType/BoCorInvItemStatus')
var BoTransactionTypeEnum = require('EnumType/BoTransactionTypeEnum')
var BoDocumentLinePickStatus = require('EnumType/BoDocumentLinePickStatus')
var BoStatus = require('EnumType/BoStatus')
var BoDocLineType = require('EnumType/BoDocLineType')
var BoExpenseOperationTypeEnum = require('EnumType/BoExpenseOperationTypeEnum')
var BoDocItemType = require('EnumType/BoDocItemType')

var ServiceLayerModule = require('Base/ServiceLayerModule.js');

//Workaround the possible intellisense bug of VS
if (typeof (SAPB1) === "undefined") {
    SAPB1 = {};
}

SAPB1.DocumentLine = function () {
}
SAPB1.DocumentLine.prototype = new SAPB1.ComplexType();
SAPB1.DocumentLine.prototype.constructor = SAPB1.DocumentLine;
SAPB1.DocumentLine.LineNum = { valueOf: function(){return 'LineNum';}, Type: 'Edm.Int32', Index: 0, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ItemCode = { valueOf: function(){return 'ItemCode';}, Type: 'Edm.String', Index: 1, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ItemDescription = { valueOf: function(){return 'ItemDescription';}, Type: 'Edm.String', Index: 2, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Quantity = { valueOf: function(){return 'Quantity';}, Type: 'Edm.Double', Index: 3, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ShipDate = { valueOf: function(){return 'ShipDate';}, Type: 'Edm.DateTime', Index: 4, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Price = { valueOf: function(){return 'Price';}, Type: 'Edm.Double', Index: 5, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.PriceAfterVAT = { valueOf: function(){return 'PriceAfterVAT';}, Type: 'Edm.Double', Index: 6, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Currency = { valueOf: function(){return 'Currency';}, Type: 'Edm.String', Index: 7, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Rate = { valueOf: function(){return 'Rate';}, Type: 'Edm.Double', Index: 8, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.DiscountPercent = { valueOf: function(){return 'DiscountPercent';}, Type: 'Edm.Double', Index: 9, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.VendorNum = { valueOf: function(){return 'VendorNum';}, Type: 'Edm.String', Index: 10, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.SerialNum = { valueOf: function(){return 'SerialNum';}, Type: 'Edm.String', Index: 11, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.WarehouseCode = { valueOf: function(){return 'WarehouseCode';}, Type: 'Edm.String', Index: 12, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.SalesPersonCode = { valueOf: function(){return 'SalesPersonCode';}, Type: 'Edm.Int32', Index: 13, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CommisionPercent = { valueOf: function(){return 'CommisionPercent';}, Type: 'Edm.Double', Index: 14, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TreeType = { valueOf: function(){return 'TreeType';}, Type: 'BoItemTreeTypes', Index: 15, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.AccountCode = { valueOf: function(){return 'AccountCode';}, Type: 'Edm.String', Index: 16, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.UseBaseUnits = { valueOf: function(){return 'UseBaseUnits';}, Type: 'BoYesNoEnum', Index: 17, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.SupplierCatNum = { valueOf: function(){return 'SupplierCatNum';}, Type: 'Edm.String', Index: 18, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CostingCode = { valueOf: function(){return 'CostingCode';}, Type: 'Edm.String', Index: 19, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ProjectCode = { valueOf: function(){return 'ProjectCode';}, Type: 'Edm.String', Index: 20, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.BarCode = { valueOf: function(){return 'BarCode';}, Type: 'Edm.String', Index: 21, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.VatGroup = { valueOf: function(){return 'VatGroup';}, Type: 'Edm.String', Index: 22, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Height1 = { valueOf: function(){return 'Height1';}, Type: 'Edm.Double', Index: 23, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Hight1Unit = { valueOf: function(){return 'Hight1Unit';}, Type: 'Edm.Int32', Index: 24, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Height2 = { valueOf: function(){return 'Height2';}, Type: 'Edm.Double', Index: 25, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Height2Unit = { valueOf: function(){return 'Height2Unit';}, Type: 'Edm.Int32', Index: 26, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Lengh1 = { valueOf: function(){return 'Lengh1';}, Type: 'Edm.Double', Index: 27, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Lengh1Unit = { valueOf: function(){return 'Lengh1Unit';}, Type: 'Edm.Int32', Index: 28, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Lengh2 = { valueOf: function(){return 'Lengh2';}, Type: 'Edm.Double', Index: 29, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Lengh2Unit = { valueOf: function(){return 'Lengh2Unit';}, Type: 'Edm.Int32', Index: 30, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Weight1 = { valueOf: function(){return 'Weight1';}, Type: 'Edm.Double', Index: 31, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Weight1Unit = { valueOf: function(){return 'Weight1Unit';}, Type: 'Edm.Int32', Index: 32, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Weight2 = { valueOf: function(){return 'Weight2';}, Type: 'Edm.Double', Index: 33, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Weight2Unit = { valueOf: function(){return 'Weight2Unit';}, Type: 'Edm.Int32', Index: 34, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Factor1 = { valueOf: function(){return 'Factor1';}, Type: 'Edm.Double', Index: 35, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Factor2 = { valueOf: function(){return 'Factor2';}, Type: 'Edm.Double', Index: 36, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Factor3 = { valueOf: function(){return 'Factor3';}, Type: 'Edm.Double', Index: 37, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Factor4 = { valueOf: function(){return 'Factor4';}, Type: 'Edm.Double', Index: 38, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.BaseType = { valueOf: function(){return 'BaseType';}, Type: 'Edm.Int32', Index: 39, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.BaseEntry = { valueOf: function(){return 'BaseEntry';}, Type: 'Edm.Int32', Index: 40, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.BaseLine = { valueOf: function(){return 'BaseLine';}, Type: 'Edm.Int32', Index: 41, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Volume = { valueOf: function(){return 'Volume';}, Type: 'Edm.Double', Index: 42, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.VolumeUnit = { valueOf: function(){return 'VolumeUnit';}, Type: 'Edm.Int32', Index: 43, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Width1 = { valueOf: function(){return 'Width1';}, Type: 'Edm.Double', Index: 44, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Width1Unit = { valueOf: function(){return 'Width1Unit';}, Type: 'Edm.Int32', Index: 45, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Width2 = { valueOf: function(){return 'Width2';}, Type: 'Edm.Double', Index: 46, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Width2Unit = { valueOf: function(){return 'Width2Unit';}, Type: 'Edm.Int32', Index: 47, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Address = { valueOf: function(){return 'Address';}, Type: 'Edm.String', Index: 48, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TaxCode = { valueOf: function(){return 'TaxCode';}, Type: 'Edm.String', Index: 49, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TaxType = { valueOf: function(){return 'TaxType';}, Type: 'BoTaxTypes', Index: 50, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TaxLiable = { valueOf: function(){return 'TaxLiable';}, Type: 'BoYesNoEnum', Index: 51, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.PickStatus = { valueOf: function(){return 'PickStatus';}, Type: 'BoYesNoEnum', Index: 52, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.PickQuantity = { valueOf: function(){return 'PickQuantity';}, Type: 'Edm.Double', Index: 53, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.PickListIdNumber = { valueOf: function(){return 'PickListIdNumber';}, Type: 'Edm.Int32', Index: 54, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.OriginalItem = { valueOf: function(){return 'OriginalItem';}, Type: 'Edm.String', Index: 55, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.BackOrder = { valueOf: function(){return 'BackOrder';}, Type: 'BoYesNoEnum', Index: 56, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.FreeText = { valueOf: function(){return 'FreeText';}, Type: 'Edm.String', Index: 57, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ShippingMethod = { valueOf: function(){return 'ShippingMethod';}, Type: 'Edm.Int32', Index: 58, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.POTargetNum = { valueOf: function(){return 'POTargetNum';}, Type: 'Edm.Int32', Index: 59, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.POTargetEntry = { valueOf: function(){return 'POTargetEntry';}, Type: 'Edm.String', Index: 60, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.POTargetRowNum = { valueOf: function(){return 'POTargetRowNum';}, Type: 'Edm.Int32', Index: 61, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CorrectionInvoiceItem = { valueOf: function(){return 'CorrectionInvoiceItem';}, Type: 'BoCorInvItemStatus', Index: 62, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CorrInvAmountToStock = { valueOf: function(){return 'CorrInvAmountToStock';}, Type: 'Edm.Double', Index: 63, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CorrInvAmountToDiffAcct = { valueOf: function(){return 'CorrInvAmountToDiffAcct';}, Type: 'Edm.Double', Index: 64, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.AppliedTax = { valueOf: function(){return 'AppliedTax';}, Type: 'Edm.Double', Index: 65, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.AppliedTaxFC = { valueOf: function(){return 'AppliedTaxFC';}, Type: 'Edm.Double', Index: 66, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.AppliedTaxSC = { valueOf: function(){return 'AppliedTaxSC';}, Type: 'Edm.Double', Index: 67, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.WTLiable = { valueOf: function(){return 'WTLiable';}, Type: 'BoYesNoEnum', Index: 68, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.DeferredTax = { valueOf: function(){return 'DeferredTax';}, Type: 'BoYesNoEnum', Index: 69, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.EqualizationTaxPercent = { valueOf: function(){return 'EqualizationTaxPercent';}, Type: 'Edm.Double', Index: 70, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TotalEqualizationTax = { valueOf: function(){return 'TotalEqualizationTax';}, Type: 'Edm.Double', Index: 71, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TotalEqualizationTaxFC = { valueOf: function(){return 'TotalEqualizationTaxFC';}, Type: 'Edm.Double', Index: 72, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TotalEqualizationTaxSC = { valueOf: function(){return 'TotalEqualizationTaxSC';}, Type: 'Edm.Double', Index: 73, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.NetTaxAmount = { valueOf: function(){return 'NetTaxAmount';}, Type: 'Edm.Double', Index: 74, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.NetTaxAmountFC = { valueOf: function(){return 'NetTaxAmountFC';}, Type: 'Edm.Double', Index: 75, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.NetTaxAmountSC = { valueOf: function(){return 'NetTaxAmountSC';}, Type: 'Edm.Double', Index: 76, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.MeasureUnit = { valueOf: function(){return 'MeasureUnit';}, Type: 'Edm.String', Index: 77, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.UnitsOfMeasurment = { valueOf: function(){return 'UnitsOfMeasurment';}, Type: 'Edm.Double', Index: 78, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.LineTotal = { valueOf: function(){return 'LineTotal';}, Type: 'Edm.Double', Index: 79, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TaxPercentagePerRow = { valueOf: function(){return 'TaxPercentagePerRow';}, Type: 'Edm.Double', Index: 80, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TaxTotal = { valueOf: function(){return 'TaxTotal';}, Type: 'Edm.Double', Index: 81, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ConsumerSalesForecast = { valueOf: function(){return 'ConsumerSalesForecast';}, Type: 'BoYesNoEnum', Index: 82, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ExciseAmount = { valueOf: function(){return 'ExciseAmount';}, Type: 'Edm.Double', Index: 83, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TaxPerUnit = { valueOf: function(){return 'TaxPerUnit';}, Type: 'Edm.Double', Index: 84, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TotalInclTax = { valueOf: function(){return 'TotalInclTax';}, Type: 'Edm.Double', Index: 85, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CountryOrg = { valueOf: function(){return 'CountryOrg';}, Type: 'Edm.String', Index: 86, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.SWW = { valueOf: function(){return 'SWW';}, Type: 'Edm.String', Index: 87, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TransactionType = { valueOf: function(){return 'TransactionType';}, Type: 'BoTransactionTypeEnum', Index: 88, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.DistributeExpense = { valueOf: function(){return 'DistributeExpense';}, Type: 'BoYesNoEnum', Index: 89, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.RowTotalFC = { valueOf: function(){return 'RowTotalFC';}, Type: 'Edm.Double', Index: 90, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.RowTotalSC = { valueOf: function(){return 'RowTotalSC';}, Type: 'Edm.Double', Index: 91, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.LastBuyInmPrice = { valueOf: function(){return 'LastBuyInmPrice';}, Type: 'Edm.Double', Index: 92, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.LastBuyDistributeSumFc = { valueOf: function(){return 'LastBuyDistributeSumFc';}, Type: 'Edm.Double', Index: 93, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.LastBuyDistributeSumSc = { valueOf: function(){return 'LastBuyDistributeSumSc';}, Type: 'Edm.Double', Index: 94, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.LastBuyDistributeSum = { valueOf: function(){return 'LastBuyDistributeSum';}, Type: 'Edm.Double', Index: 95, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.StockDistributesumForeign = { valueOf: function(){return 'StockDistributesumForeign';}, Type: 'Edm.Double', Index: 96, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.StockDistributesumSystem = { valueOf: function(){return 'StockDistributesumSystem';}, Type: 'Edm.Double', Index: 97, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.StockDistributesum = { valueOf: function(){return 'StockDistributesum';}, Type: 'Edm.Double', Index: 98, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.StockInmPrice = { valueOf: function(){return 'StockInmPrice';}, Type: 'Edm.Double', Index: 99, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.PickStatusEx = { valueOf: function(){return 'PickStatusEx';}, Type: 'BoDocumentLinePickStatus', Index: 100, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TaxBeforeDPM = { valueOf: function(){return 'TaxBeforeDPM';}, Type: 'Edm.Double', Index: 101, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TaxBeforeDPMFC = { valueOf: function(){return 'TaxBeforeDPMFC';}, Type: 'Edm.Double', Index: 102, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TaxBeforeDPMSC = { valueOf: function(){return 'TaxBeforeDPMSC';}, Type: 'Edm.Double', Index: 103, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CFOPCode = { valueOf: function(){return 'CFOPCode';}, Type: 'Edm.String', Index: 104, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CSTCode = { valueOf: function(){return 'CSTCode';}, Type: 'Edm.String', Index: 105, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Usage = { valueOf: function(){return 'Usage';}, Type: 'Edm.Int32', Index: 106, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TaxOnly = { valueOf: function(){return 'TaxOnly';}, Type: 'BoYesNoEnum', Index: 107, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.VisualOrder = { valueOf: function(){return 'VisualOrder';}, Type: 'Edm.Int32', Index: 108, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.BaseOpenQuantity = { valueOf: function(){return 'BaseOpenQuantity';}, Type: 'Edm.Double', Index: 109, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.UnitPrice = { valueOf: function(){return 'UnitPrice';}, Type: 'Edm.Double', Index: 110, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.LineStatus = { valueOf: function(){return 'LineStatus';}, Type: 'BoStatus', Index: 111, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.PackageQuantity = { valueOf: function(){return 'PackageQuantity';}, Type: 'Edm.Double', Index: 112, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Text = { valueOf: function(){return 'Text';}, Type: 'Edm.String', Index: 113, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.LineType = { valueOf: function(){return 'LineType';}, Type: 'BoDocLineType', Index: 114, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.COGSCostingCode = { valueOf: function(){return 'COGSCostingCode';}, Type: 'Edm.String', Index: 115, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.COGSAccountCode = { valueOf: function(){return 'COGSAccountCode';}, Type: 'Edm.String', Index: 116, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ChangeAssemlyBoMWarehouse = { valueOf: function(){return 'ChangeAssemlyBoMWarehouse';}, Type: 'Edm.String', Index: 117, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.GrossBuyPrice = { valueOf: function(){return 'GrossBuyPrice';}, Type: 'Edm.Double', Index: 118, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.GrossBase = { valueOf: function(){return 'GrossBase';}, Type: 'Edm.Int32', Index: 119, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.GrossProfitTotalBasePrice = { valueOf: function(){return 'GrossProfitTotalBasePrice';}, Type: 'Edm.Double', Index: 120, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CostingCode2 = { valueOf: function(){return 'CostingCode2';}, Type: 'Edm.String', Index: 121, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CostingCode3 = { valueOf: function(){return 'CostingCode3';}, Type: 'Edm.String', Index: 122, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CostingCode4 = { valueOf: function(){return 'CostingCode4';}, Type: 'Edm.String', Index: 123, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CostingCode5 = { valueOf: function(){return 'CostingCode5';}, Type: 'Edm.String', Index: 124, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ItemDetails = { valueOf: function(){return 'ItemDetails';}, Type: 'Edm.String', Index: 125, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.LocationCode = { valueOf: function(){return 'LocationCode';}, Type: 'Edm.Int32', Index: 126, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ActualDeliveryDate = { valueOf: function(){return 'ActualDeliveryDate';}, Type: 'Edm.DateTime', Index: 127, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.RemainingOpenQuantity = { valueOf: function(){return 'RemainingOpenQuantity';}, Type: 'Edm.Double', Index: 128, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.OpenAmount = { valueOf: function(){return 'OpenAmount';}, Type: 'Edm.Double', Index: 129, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.OpenAmountFC = { valueOf: function(){return 'OpenAmountFC';}, Type: 'Edm.Double', Index: 130, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.OpenAmountSC = { valueOf: function(){return 'OpenAmountSC';}, Type: 'Edm.Double', Index: 131, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ExLineNo = { valueOf: function(){return 'ExLineNo';}, Type: 'Edm.String', Index: 132, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.RequiredDate = { valueOf: function(){return 'RequiredDate';}, Type: 'Edm.DateTime', Index: 133, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.RequiredQuantity = { valueOf: function(){return 'RequiredQuantity';}, Type: 'Edm.Double', Index: 134, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.COGSCostingCode2 = { valueOf: function(){return 'COGSCostingCode2';}, Type: 'Edm.String', Index: 135, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.COGSCostingCode3 = { valueOf: function(){return 'COGSCostingCode3';}, Type: 'Edm.String', Index: 136, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.COGSCostingCode4 = { valueOf: function(){return 'COGSCostingCode4';}, Type: 'Edm.String', Index: 137, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.COGSCostingCode5 = { valueOf: function(){return 'COGSCostingCode5';}, Type: 'Edm.String', Index: 138, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CSTforIPI = { valueOf: function(){return 'CSTforIPI';}, Type: 'Edm.String', Index: 139, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CSTforPIS = { valueOf: function(){return 'CSTforPIS';}, Type: 'Edm.String', Index: 140, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CSTforCOFINS = { valueOf: function(){return 'CSTforCOFINS';}, Type: 'Edm.String', Index: 141, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.CreditOriginCode = { valueOf: function(){return 'CreditOriginCode';}, Type: 'Edm.String', Index: 142, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.WithoutInventoryMovement = { valueOf: function(){return 'WithoutInventoryMovement';}, Type: 'BoYesNoEnum', Index: 143, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.AgreementNo = { valueOf: function(){return 'AgreementNo';}, Type: 'Edm.Int32', Index: 144, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.AgreementRowNumber = { valueOf: function(){return 'AgreementRowNumber';}, Type: 'Edm.Int32', Index: 145, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ActualBaseEntry = { valueOf: function(){return 'ActualBaseEntry';}, Type: 'Edm.Int32', Index: 146, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ActualBaseLine = { valueOf: function(){return 'ActualBaseLine';}, Type: 'Edm.Int32', Index: 147, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.DocEntry = { valueOf: function(){return 'DocEntry';}, Type: 'Edm.Int32', Index: 148, Nullable: false, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Surpluses = { valueOf: function(){return 'Surpluses';}, Type: 'Edm.Double', Index: 149, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.DefectAndBreakup = { valueOf: function(){return 'DefectAndBreakup';}, Type: 'Edm.Double', Index: 150, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Shortages = { valueOf: function(){return 'Shortages';}, Type: 'Edm.Double', Index: 151, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ConsiderQuantity = { valueOf: function(){return 'ConsiderQuantity';}, Type: 'BoYesNoEnum', Index: 152, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.PartialRetirement = { valueOf: function(){return 'PartialRetirement';}, Type: 'BoYesNoEnum', Index: 153, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.RetirementQuantity = { valueOf: function(){return 'RetirementQuantity';}, Type: 'Edm.Double', Index: 154, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.RetirementAPC = { valueOf: function(){return 'RetirementAPC';}, Type: 'Edm.Double', Index: 155, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ThirdParty = { valueOf: function(){return 'ThirdParty';}, Type: 'BoYesNoEnum', Index: 156, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ExpenseType = { valueOf: function(){return 'ExpenseType';}, Type: 'Edm.String', Index: 157, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ReceiptNumber = { valueOf: function(){return 'ReceiptNumber';}, Type: 'Edm.String', Index: 158, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ExpenseOperationType = { valueOf: function(){return 'ExpenseOperationType';}, Type: 'BoExpenseOperationTypeEnum', Index: 159, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.FederalTaxID = { valueOf: function(){return 'FederalTaxID';}, Type: 'Edm.String', Index: 160, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.EnableReturnCost = { valueOf: function(){return 'EnableReturnCost';}, Type: 'BoYesNoEnum', Index: 161, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ReturnCost = { valueOf: function(){return 'ReturnCost';}, Type: 'Edm.Double', Index: 162, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.LineVendor = { valueOf: function(){return 'LineVendor';}, Type: 'Edm.String', Index: 163, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.StgSeqNum = { valueOf: function(){return 'StgSeqNum';}, Type: 'Edm.Int32', Index: 164, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.StgEntry = { valueOf: function(){return 'StgEntry';}, Type: 'Edm.Int32', Index: 165, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.StgDesc = { valueOf: function(){return 'StgDesc';}, Type: 'Edm.String', Index: 166, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.UoMEntry = { valueOf: function(){return 'UoMEntry';}, Type: 'Edm.Int32', Index: 167, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.UoMCode = { valueOf: function(){return 'UoMCode';}, Type: 'Edm.String', Index: 168, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.InventoryQuantity = { valueOf: function(){return 'InventoryQuantity';}, Type: 'Edm.Double', Index: 169, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.RemainingOpenInventoryQuantity = { valueOf: function(){return 'RemainingOpenInventoryQuantity';}, Type: 'Edm.Double', Index: 170, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ParentLineNum = { valueOf: function(){return 'ParentLineNum';}, Type: 'Edm.Int32', Index: 171, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.Incoterms = { valueOf: function(){return 'Incoterms';}, Type: 'Edm.Int32', Index: 172, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.TransportMode = { valueOf: function(){return 'TransportMode';}, Type: 'Edm.Int32', Index: 173, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ItemType = { valueOf: function(){return 'ItemType';}, Type: 'BoDocItemType', Index: 174, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ChangeInventoryQuantityIndependently = { valueOf: function(){return 'ChangeInventoryQuantityIndependently';}, Type: 'BoYesNoEnum', Index: 175, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.FreeOfChargeBP = { valueOf: function(){return 'FreeOfChargeBP';}, Type: 'BoYesNoEnum', Index: 176, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.SACEntry = { valueOf: function(){return 'SACEntry';}, Type: 'Edm.Int32', Index: 177, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.HSNEntry = { valueOf: function(){return 'HSNEntry';}, Type: 'Edm.Int32', Index: 178, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.GrossPrice = { valueOf: function(){return 'GrossPrice';}, Type: 'Edm.Double', Index: 179, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.GrossTotal = { valueOf: function(){return 'GrossTotal';}, Type: 'Edm.Double', Index: 180, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.GrossTotalFC = { valueOf: function(){return 'GrossTotalFC';}, Type: 'Edm.Double', Index: 181, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.GrossTotalSC = { valueOf: function(){return 'GrossTotalSC';}, Type: 'Edm.Double', Index: 182, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.NCMCode = { valueOf: function(){return 'NCMCode';}, Type: 'Edm.Int32', Index: 183, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ShipToCode = { valueOf: function(){return 'ShipToCode';}, Type: 'Edm.String', Index: 184, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ShipToDescription = { valueOf: function(){return 'ShipToDescription';}, Type: 'Edm.String', Index: 185, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ShipFromCode = { valueOf: function(){return 'ShipFromCode';}, Type: 'Edm.String', Index: 186, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.ShipFromDescription = { valueOf: function(){return 'ShipFromDescription';}, Type: 'Edm.String', Index: 187, Nullable: true, IsArray: false, IsComplex: false };
SAPB1.DocumentLine.LineTaxJurisdictions = { valueOf: function(){return 'LineTaxJurisdictions';}, Type: 'LineTaxJurisdiction', Index: 188, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.DocumentLine.GeneratedAssets = { valueOf: function(){return 'GeneratedAssets';}, Type: 'GeneratedAsset', Index: 189, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.DocumentLine.DocumentLineAdditionalExpenses = { valueOf: function(){return 'DocumentLineAdditionalExpenses';}, Type: 'DocumentLineAdditionalExpense', Index: 190, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.DocumentLine.WithholdingTaxLines = { valueOf: function(){return 'WithholdingTaxLines';}, Type: 'WithholdingTaxLine', Index: 191, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.DocumentLine.SerialNumbers = { valueOf: function(){return 'SerialNumbers';}, Type: 'SerialNumber', Index: 192, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.DocumentLine.BatchNumbers = { valueOf: function(){return 'BatchNumbers';}, Type: 'BatchNumber', Index: 193, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.DocumentLine.DocumentLinesBinAllocations = { valueOf: function(){return 'DocumentLinesBinAllocations';}, Type: 'DocumentLinesBinAllocation', Index: 194, Nullable: true, IsArray: true, IsComplex: true };
SAPB1.DocumentLine.prototype.LineNum = new Number();
SAPB1.DocumentLine.prototype.ItemCode = new String();
SAPB1.DocumentLine.prototype.ItemDescription = new String();
SAPB1.DocumentLine.prototype.Quantity = new Number();
SAPB1.DocumentLine.prototype.ShipDate = new String();
SAPB1.DocumentLine.prototype.Price = new Number();
SAPB1.DocumentLine.prototype.PriceAfterVAT = new Number();
SAPB1.DocumentLine.prototype.Currency = new String();
SAPB1.DocumentLine.prototype.Rate = new Number();
SAPB1.DocumentLine.prototype.DiscountPercent = new Number();
SAPB1.DocumentLine.prototype.VendorNum = new String();
SAPB1.DocumentLine.prototype.SerialNum = new String();
SAPB1.DocumentLine.prototype.WarehouseCode = new String();
SAPB1.DocumentLine.prototype.SalesPersonCode = new Number();
SAPB1.DocumentLine.prototype.CommisionPercent = new Number();
SAPB1.DocumentLine.prototype.TreeType = new String();
SAPB1.DocumentLine.prototype.AccountCode = new String();
SAPB1.DocumentLine.prototype.UseBaseUnits = new String();
SAPB1.DocumentLine.prototype.SupplierCatNum = new String();
SAPB1.DocumentLine.prototype.CostingCode = new String();
SAPB1.DocumentLine.prototype.ProjectCode = new String();
SAPB1.DocumentLine.prototype.BarCode = new String();
SAPB1.DocumentLine.prototype.VatGroup = new String();
SAPB1.DocumentLine.prototype.Height1 = new Number();
SAPB1.DocumentLine.prototype.Hight1Unit = new Number();
SAPB1.DocumentLine.prototype.Height2 = new Number();
SAPB1.DocumentLine.prototype.Height2Unit = new Number();
SAPB1.DocumentLine.prototype.Lengh1 = new Number();
SAPB1.DocumentLine.prototype.Lengh1Unit = new Number();
SAPB1.DocumentLine.prototype.Lengh2 = new Number();
SAPB1.DocumentLine.prototype.Lengh2Unit = new Number();
SAPB1.DocumentLine.prototype.Weight1 = new Number();
SAPB1.DocumentLine.prototype.Weight1Unit = new Number();
SAPB1.DocumentLine.prototype.Weight2 = new Number();
SAPB1.DocumentLine.prototype.Weight2Unit = new Number();
SAPB1.DocumentLine.prototype.Factor1 = new Number();
SAPB1.DocumentLine.prototype.Factor2 = new Number();
SAPB1.DocumentLine.prototype.Factor3 = new Number();
SAPB1.DocumentLine.prototype.Factor4 = new Number();
SAPB1.DocumentLine.prototype.BaseType = new Number();
SAPB1.DocumentLine.prototype.BaseEntry = new Number();
SAPB1.DocumentLine.prototype.BaseLine = new Number();
SAPB1.DocumentLine.prototype.Volume = new Number();
SAPB1.DocumentLine.prototype.VolumeUnit = new Number();
SAPB1.DocumentLine.prototype.Width1 = new Number();
SAPB1.DocumentLine.prototype.Width1Unit = new Number();
SAPB1.DocumentLine.prototype.Width2 = new Number();
SAPB1.DocumentLine.prototype.Width2Unit = new Number();
SAPB1.DocumentLine.prototype.Address = new String();
SAPB1.DocumentLine.prototype.TaxCode = new String();
SAPB1.DocumentLine.prototype.TaxType = new String();
SAPB1.DocumentLine.prototype.TaxLiable = new String();
SAPB1.DocumentLine.prototype.PickStatus = new String();
SAPB1.DocumentLine.prototype.PickQuantity = new Number();
SAPB1.DocumentLine.prototype.PickListIdNumber = new Number();
SAPB1.DocumentLine.prototype.OriginalItem = new String();
SAPB1.DocumentLine.prototype.BackOrder = new String();
SAPB1.DocumentLine.prototype.FreeText = new String();
SAPB1.DocumentLine.prototype.ShippingMethod = new Number();
SAPB1.DocumentLine.prototype.POTargetNum = new Number();
SAPB1.DocumentLine.prototype.POTargetEntry = new String();
SAPB1.DocumentLine.prototype.POTargetRowNum = new Number();
SAPB1.DocumentLine.prototype.CorrectionInvoiceItem = new String();
SAPB1.DocumentLine.prototype.CorrInvAmountToStock = new Number();
SAPB1.DocumentLine.prototype.CorrInvAmountToDiffAcct = new Number();
SAPB1.DocumentLine.prototype.AppliedTax = new Number();
SAPB1.DocumentLine.prototype.AppliedTaxFC = new Number();
SAPB1.DocumentLine.prototype.AppliedTaxSC = new Number();
SAPB1.DocumentLine.prototype.WTLiable = new String();
SAPB1.DocumentLine.prototype.DeferredTax = new String();
SAPB1.DocumentLine.prototype.EqualizationTaxPercent = new Number();
SAPB1.DocumentLine.prototype.TotalEqualizationTax = new Number();
SAPB1.DocumentLine.prototype.TotalEqualizationTaxFC = new Number();
SAPB1.DocumentLine.prototype.TotalEqualizationTaxSC = new Number();
SAPB1.DocumentLine.prototype.NetTaxAmount = new Number();
SAPB1.DocumentLine.prototype.NetTaxAmountFC = new Number();
SAPB1.DocumentLine.prototype.NetTaxAmountSC = new Number();
SAPB1.DocumentLine.prototype.MeasureUnit = new String();
SAPB1.DocumentLine.prototype.UnitsOfMeasurment = new Number();
SAPB1.DocumentLine.prototype.LineTotal = new Number();
SAPB1.DocumentLine.prototype.TaxPercentagePerRow = new Number();
SAPB1.DocumentLine.prototype.TaxTotal = new Number();
SAPB1.DocumentLine.prototype.ConsumerSalesForecast = new String();
SAPB1.DocumentLine.prototype.ExciseAmount = new Number();
SAPB1.DocumentLine.prototype.TaxPerUnit = new Number();
SAPB1.DocumentLine.prototype.TotalInclTax = new Number();
SAPB1.DocumentLine.prototype.CountryOrg = new String();
SAPB1.DocumentLine.prototype.SWW = new String();
SAPB1.DocumentLine.prototype.TransactionType = new String();
SAPB1.DocumentLine.prototype.DistributeExpense = new String();
SAPB1.DocumentLine.prototype.RowTotalFC = new Number();
SAPB1.DocumentLine.prototype.RowTotalSC = new Number();
SAPB1.DocumentLine.prototype.LastBuyInmPrice = new Number();
SAPB1.DocumentLine.prototype.LastBuyDistributeSumFc = new Number();
SAPB1.DocumentLine.prototype.LastBuyDistributeSumSc = new Number();
SAPB1.DocumentLine.prototype.LastBuyDistributeSum = new Number();
SAPB1.DocumentLine.prototype.StockDistributesumForeign = new Number();
SAPB1.DocumentLine.prototype.StockDistributesumSystem = new Number();
SAPB1.DocumentLine.prototype.StockDistributesum = new Number();
SAPB1.DocumentLine.prototype.StockInmPrice = new Number();
SAPB1.DocumentLine.prototype.PickStatusEx = new String();
SAPB1.DocumentLine.prototype.TaxBeforeDPM = new Number();
SAPB1.DocumentLine.prototype.TaxBeforeDPMFC = new Number();
SAPB1.DocumentLine.prototype.TaxBeforeDPMSC = new Number();
SAPB1.DocumentLine.prototype.CFOPCode = new String();
SAPB1.DocumentLine.prototype.CSTCode = new String();
SAPB1.DocumentLine.prototype.Usage = new Number();
SAPB1.DocumentLine.prototype.TaxOnly = new String();
SAPB1.DocumentLine.prototype.VisualOrder = new Number();
SAPB1.DocumentLine.prototype.BaseOpenQuantity = new Number();
SAPB1.DocumentLine.prototype.UnitPrice = new Number();
SAPB1.DocumentLine.prototype.LineStatus = new String();
SAPB1.DocumentLine.prototype.PackageQuantity = new Number();
SAPB1.DocumentLine.prototype.Text = new String();
SAPB1.DocumentLine.prototype.LineType = new String();
SAPB1.DocumentLine.prototype.COGSCostingCode = new String();
SAPB1.DocumentLine.prototype.COGSAccountCode = new String();
SAPB1.DocumentLine.prototype.ChangeAssemlyBoMWarehouse = new String();
SAPB1.DocumentLine.prototype.GrossBuyPrice = new Number();
SAPB1.DocumentLine.prototype.GrossBase = new Number();
SAPB1.DocumentLine.prototype.GrossProfitTotalBasePrice = new Number();
SAPB1.DocumentLine.prototype.CostingCode2 = new String();
SAPB1.DocumentLine.prototype.CostingCode3 = new String();
SAPB1.DocumentLine.prototype.CostingCode4 = new String();
SAPB1.DocumentLine.prototype.CostingCode5 = new String();
SAPB1.DocumentLine.prototype.ItemDetails = new String();
SAPB1.DocumentLine.prototype.LocationCode = new Number();
SAPB1.DocumentLine.prototype.ActualDeliveryDate = new String();
SAPB1.DocumentLine.prototype.RemainingOpenQuantity = new Number();
SAPB1.DocumentLine.prototype.OpenAmount = new Number();
SAPB1.DocumentLine.prototype.OpenAmountFC = new Number();
SAPB1.DocumentLine.prototype.OpenAmountSC = new Number();
SAPB1.DocumentLine.prototype.ExLineNo = new String();
SAPB1.DocumentLine.prototype.RequiredDate = new String();
SAPB1.DocumentLine.prototype.RequiredQuantity = new Number();
SAPB1.DocumentLine.prototype.COGSCostingCode2 = new String();
SAPB1.DocumentLine.prototype.COGSCostingCode3 = new String();
SAPB1.DocumentLine.prototype.COGSCostingCode4 = new String();
SAPB1.DocumentLine.prototype.COGSCostingCode5 = new String();
SAPB1.DocumentLine.prototype.CSTforIPI = new String();
SAPB1.DocumentLine.prototype.CSTforPIS = new String();
SAPB1.DocumentLine.prototype.CSTforCOFINS = new String();
SAPB1.DocumentLine.prototype.CreditOriginCode = new String();
SAPB1.DocumentLine.prototype.WithoutInventoryMovement = new String();
SAPB1.DocumentLine.prototype.AgreementNo = new Number();
SAPB1.DocumentLine.prototype.AgreementRowNumber = new Number();
SAPB1.DocumentLine.prototype.ActualBaseEntry = new Number();
SAPB1.DocumentLine.prototype.ActualBaseLine = new Number();
SAPB1.DocumentLine.prototype.DocEntry = new Number();
SAPB1.DocumentLine.prototype.Surpluses = new Number();
SAPB1.DocumentLine.prototype.DefectAndBreakup = new Number();
SAPB1.DocumentLine.prototype.Shortages = new Number();
SAPB1.DocumentLine.prototype.ConsiderQuantity = new String();
SAPB1.DocumentLine.prototype.PartialRetirement = new String();
SAPB1.DocumentLine.prototype.RetirementQuantity = new Number();
SAPB1.DocumentLine.prototype.RetirementAPC = new Number();
SAPB1.DocumentLine.prototype.ThirdParty = new String();
SAPB1.DocumentLine.prototype.ExpenseType = new String();
SAPB1.DocumentLine.prototype.ReceiptNumber = new String();
SAPB1.DocumentLine.prototype.ExpenseOperationType = new String();
SAPB1.DocumentLine.prototype.FederalTaxID = new String();
SAPB1.DocumentLine.prototype.EnableReturnCost = new String();
SAPB1.DocumentLine.prototype.ReturnCost = new Number();
SAPB1.DocumentLine.prototype.LineVendor = new String();
SAPB1.DocumentLine.prototype.StgSeqNum = new Number();
SAPB1.DocumentLine.prototype.StgEntry = new Number();
SAPB1.DocumentLine.prototype.StgDesc = new String();
SAPB1.DocumentLine.prototype.UoMEntry = new Number();
SAPB1.DocumentLine.prototype.UoMCode = new String();
SAPB1.DocumentLine.prototype.InventoryQuantity = new Number();
SAPB1.DocumentLine.prototype.RemainingOpenInventoryQuantity = new Number();
SAPB1.DocumentLine.prototype.ParentLineNum = new Number();
SAPB1.DocumentLine.prototype.Incoterms = new Number();
SAPB1.DocumentLine.prototype.TransportMode = new Number();
SAPB1.DocumentLine.prototype.ItemType = new String();
SAPB1.DocumentLine.prototype.ChangeInventoryQuantityIndependently = new String();
SAPB1.DocumentLine.prototype.FreeOfChargeBP = new String();
SAPB1.DocumentLine.prototype.SACEntry = new Number();
SAPB1.DocumentLine.prototype.HSNEntry = new Number();
SAPB1.DocumentLine.prototype.GrossPrice = new Number();
SAPB1.DocumentLine.prototype.GrossTotal = new Number();
SAPB1.DocumentLine.prototype.GrossTotalFC = new Number();
SAPB1.DocumentLine.prototype.GrossTotalSC = new Number();
SAPB1.DocumentLine.prototype.NCMCode = new Number();
SAPB1.DocumentLine.prototype.ShipToCode = new String();
SAPB1.DocumentLine.prototype.ShipToDescription = new String();
SAPB1.DocumentLine.prototype.ShipFromCode = new String();
SAPB1.DocumentLine.prototype.ShipFromDescription = new String();
SAPB1.DocumentLine.prototype.LineTaxJurisdictions = new LineTaxJurisdictionCollection();
SAPB1.DocumentLine.prototype.GeneratedAssets = new GeneratedAssetCollection();
SAPB1.DocumentLine.prototype.DocumentLineAdditionalExpenses = new DocumentLineAdditionalExpenseCollection();
SAPB1.DocumentLine.prototype.WithholdingTaxLines = new WithholdingTaxLineCollection();
SAPB1.DocumentLine.prototype.SerialNumbers = new SerialNumberCollection();
SAPB1.DocumentLine.prototype.BatchNumbers = new BatchNumberCollection();
SAPB1.DocumentLine.prototype.DocumentLinesBinAllocations = new DocumentLinesBinAllocationCollection();

SAPB1.DocumentLine.LineTaxJurisdiction = LineTaxJurisdiction
SAPB1.DocumentLine.LineTaxJurisdictionCollection = LineTaxJurisdictionCollection
SAPB1.DocumentLine.GeneratedAsset = GeneratedAsset
SAPB1.DocumentLine.GeneratedAssetCollection = GeneratedAssetCollection
SAPB1.DocumentLine.DocumentLineAdditionalExpense = DocumentLineAdditionalExpense
SAPB1.DocumentLine.DocumentLineAdditionalExpenseCollection = DocumentLineAdditionalExpenseCollection
SAPB1.DocumentLine.WithholdingTaxLine = WithholdingTaxLine
SAPB1.DocumentLine.WithholdingTaxLineCollection = WithholdingTaxLineCollection
SAPB1.DocumentLine.SerialNumber = SerialNumber
SAPB1.DocumentLine.SerialNumberCollection = SerialNumberCollection
SAPB1.DocumentLine.BatchNumber = BatchNumber
SAPB1.DocumentLine.BatchNumberCollection = BatchNumberCollection
SAPB1.DocumentLine.DocumentLinesBinAllocation = DocumentLinesBinAllocation
SAPB1.DocumentLine.DocumentLinesBinAllocationCollection = DocumentLinesBinAllocationCollection

SAPB1.DocumentLine.BoItemTreeTypes = BoItemTreeTypes
SAPB1.DocumentLine.BoYesNoEnum = BoYesNoEnum
SAPB1.DocumentLine.BoTaxTypes = BoTaxTypes
SAPB1.DocumentLine.BoCorInvItemStatus = BoCorInvItemStatus
SAPB1.DocumentLine.BoTransactionTypeEnum = BoTransactionTypeEnum
SAPB1.DocumentLine.BoDocumentLinePickStatus = BoDocumentLinePickStatus
SAPB1.DocumentLine.BoStatus = BoStatus
SAPB1.DocumentLine.BoDocLineType = BoDocLineType
SAPB1.DocumentLine.BoExpenseOperationTypeEnum = BoExpenseOperationTypeEnum
SAPB1.DocumentLine.BoDocItemType = BoDocItemType

SAPB1.DocumentLine.create = function (rawObject) {
    var instance = new SAPB1.DocumentLine();
    for (var prop in rawObject) {
        if (rawObject.hasOwnProperty(prop)) {
            if (SAPB1.DocumentLine.prototype.hasOwnProperty(prop)) {
                if (instance[prop] instanceof SAPB1.Collection) {
                    var collectionInstance = instance[prop].constructor.create(rawObject[prop]);
                    instance[prop] = collectionInstance;
                } else if (instance[prop] instanceof SAPB1.ComplexType) {
                    var complexInstance = instance[prop].constructor.create(rawObject[prop]);
                    instance[prop] = complexInstance;
                }
                else {
                    instance[prop] = rawObject[prop];
                }
            }
        }
    }
    return instance;
}


module.exports = SAPB1.DocumentLine;
